[{"E:\\QLDA\\book-shop\\frontend\\src\\index.js":"1","E:\\QLDA\\book-shop\\frontend\\src\\store.js":"2","E:\\QLDA\\book-shop\\frontend\\src\\app\\App.js":"3","E:\\QLDA\\book-shop\\frontend\\src\\reducers\\globalReducer.js":"4","E:\\QLDA\\book-shop\\frontend\\src\\reducers\\productReducers.js":"5","E:\\QLDA\\book-shop\\frontend\\src\\reducers\\orderReducers.js":"6","E:\\QLDA\\book-shop\\frontend\\src\\reducers\\userReducers.js":"7","E:\\QLDA\\book-shop\\frontend\\src\\contexts\\AuthOpenContext.js":"8","E:\\QLDA\\book-shop\\frontend\\src\\contexts\\CartOpenContext.js":"9","E:\\QLDA\\book-shop\\frontend\\src\\utils\\theme.js":"10","E:\\QLDA\\book-shop\\frontend\\src\\contexts\\ThemeContext.js":"11","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\RedirectBar.js":"12","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\NavBar.js":"13","E:\\QLDA\\book-shop\\frontend\\src\\contexts\\RedirectOpenContext.js":"14","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\AuthPopup.js":"15","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\CopyRight.js":"16","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\Notification.js":"17","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\CartBar.js":"18","E:\\QLDA\\book-shop\\frontend\\src\\locales\\index.js":"19","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\index.js":"20","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Home\\index.js":"21","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\index.js":"22","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\PageNotFound\\index.js":"23","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Product\\index.js":"24","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Checkout\\index.js":"25","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\AboutUs\\index.js":"26","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\UnderConstruction\\index.js":"27","E:\\QLDA\\book-shop\\frontend\\src\\constants\\globalConstants.js":"28","E:\\QLDA\\book-shop\\frontend\\src\\constants\\orderConstants.js":"29","E:\\QLDA\\book-shop\\frontend\\src\\constants\\productConstants.js":"30","E:\\QLDA\\book-shop\\frontend\\src\\constants\\userConstants.js":"31","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\RedirectBar.styles.js":"32","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\Catalogue.js":"33","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\NavBar.styles.js":"34","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\AuthPopup.styles.js":"35","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\CartBar.styles.js":"36","E:\\QLDA\\book-shop\\frontend\\src\\actions\\userActions.js":"37","E:\\QLDA\\book-shop\\frontend\\src\\actions\\productActions.js":"38","E:\\QLDA\\book-shop\\frontend\\src\\locales\\vi.js":"39","E:\\QLDA\\book-shop\\frontend\\src\\locales\\en.js":"40","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\FormPayment.js":"41","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\FormComplete.js":"42","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\styles.js":"43","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\FormShipping.js":"44","E:\\QLDA\\book-shop\\frontend\\src\\utils\\stripeAPI.js":"45","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\Catalogue.styles.js":"46","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\AboutUs\\styles.js":"47","E:\\QLDA\\book-shop\\frontend\\src\\utils\\axiosInstance.js":"48","E:\\QLDA\\book-shop\\frontend\\src\\utils\\priceCalculator.js":"49","E:\\QLDA\\book-shop\\frontend\\src\\actions\\orderActions.js":"50","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Checkout\\styles.js":"51","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\StripeInput.js":"52","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Product\\styles.js":"53","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\styles.js":"54","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Home\\styles.js":"55"},{"size":286,"mtime":1617172385872,"results":"56","hashOfConfig":"57"},{"size":1785,"mtime":1617172385873,"results":"58","hashOfConfig":"57"},{"size":3501,"mtime":1617172385808,"results":"59","hashOfConfig":"57"},{"size":717,"mtime":1617172385872,"results":"60","hashOfConfig":"57"},{"size":5767,"mtime":1617172385873,"results":"61","hashOfConfig":"57"},{"size":2041,"mtime":1617172385873,"results":"62","hashOfConfig":"57"},{"size":1473,"mtime":1617172385873,"results":"63","hashOfConfig":"57"},{"size":122,"mtime":1617172385816,"results":"64","hashOfConfig":"57"},{"size":122,"mtime":1617172385816,"results":"65","hashOfConfig":"57"},{"size":2440,"mtime":1617172385874,"results":"66","hashOfConfig":"57"},{"size":138,"mtime":1617172385816,"results":"67","hashOfConfig":"57"},{"size":3174,"mtime":1617172385810,"results":"68","hashOfConfig":"57"},{"size":10563,"mtime":1617172385809,"results":"69","hashOfConfig":"57"},{"size":130,"mtime":1617172385816,"results":"70","hashOfConfig":"57"},{"size":14646,"mtime":1617172385808,"results":"71","hashOfConfig":"57"},{"size":813,"mtime":1617172385809,"results":"72","hashOfConfig":"57"},{"size":1512,"mtime":1617172385810,"results":"73","hashOfConfig":"57"},{"size":10095,"mtime":1617172385809,"results":"74","hashOfConfig":"57"},{"size":111,"mtime":1617172385872,"results":"75","hashOfConfig":"57"},{"size":4336,"mtime":1617172385813,"results":"76","hashOfConfig":"57"},{"size":16360,"mtime":1617172385812,"results":"77","hashOfConfig":"57"},{"size":8671,"mtime":1617172385811,"results":"78","hashOfConfig":"57"},{"size":2427,"mtime":1617172385814,"results":"79","hashOfConfig":"57"},{"size":15370,"mtime":1617172385814,"results":"80","hashOfConfig":"57"},{"size":23819,"mtime":1617172385812,"results":"81","hashOfConfig":"57"},{"size":10523,"mtime":1617172385811,"results":"82","hashOfConfig":"57"},{"size":1442,"mtime":1617172385815,"results":"83","hashOfConfig":"57"},{"size":339,"mtime":1617172385815,"results":"84","hashOfConfig":"57"},{"size":368,"mtime":1617172385815,"results":"85","hashOfConfig":"57"},{"size":1420,"mtime":1617172385816,"results":"86","hashOfConfig":"57"},{"size":786,"mtime":1617172385816,"results":"87","hashOfConfig":"57"},{"size":1308,"mtime":1617172385810,"results":"88","hashOfConfig":"57"},{"size":12203,"mtime":1618124921738,"results":"89","hashOfConfig":"57"},{"size":875,"mtime":1617172385809,"results":"90","hashOfConfig":"57"},{"size":727,"mtime":1617172385808,"results":"91","hashOfConfig":"57"},{"size":3389,"mtime":1617172385809,"results":"92","hashOfConfig":"57"},{"size":3495,"mtime":1617172385807,"results":"93","hashOfConfig":"57"},{"size":3486,"mtime":1617172385807,"results":"94","hashOfConfig":"57"},{"size":8358,"mtime":1617172385872,"results":"95","hashOfConfig":"57"},{"size":6564,"mtime":1617172385872,"results":"96","hashOfConfig":"57"},{"size":15887,"mtime":1617172385813,"results":"97","hashOfConfig":"57"},{"size":1011,"mtime":1617172385813,"results":"98","hashOfConfig":"57"},{"size":6078,"mtime":1617172385813,"results":"99","hashOfConfig":"57"},{"size":15459,"mtime":1617172385813,"results":"100","hashOfConfig":"57"},{"size":690,"mtime":1617172385873,"results":"101","hashOfConfig":"57"},{"size":1770,"mtime":1617172385811,"results":"102","hashOfConfig":"57"},{"size":3814,"mtime":1617172385811,"results":"103","hashOfConfig":"57"},{"size":187,"mtime":1617421455952,"results":"104","hashOfConfig":"57"},{"size":3863,"mtime":1617172385873,"results":"105","hashOfConfig":"57"},{"size":1181,"mtime":1617172385807,"results":"106","hashOfConfig":"57"},{"size":5503,"mtime":1617172385812,"results":"107","hashOfConfig":"57"},{"size":435,"mtime":1617172385813,"results":"108","hashOfConfig":"57"},{"size":4465,"mtime":1617172385815,"results":"109","hashOfConfig":"57"},{"size":3432,"mtime":1617172385811,"results":"110","hashOfConfig":"57"},{"size":6107,"mtime":1617172385812,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"c7hxpv",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"114"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"114"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"114"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"114"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"114"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"114"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"114"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"114"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"114"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"E:\\QLDA\\book-shop\\frontend\\src\\index.js",[],["236","237"],"E:\\QLDA\\book-shop\\frontend\\src\\store.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\App.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\reducers\\globalReducer.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\reducers\\productReducers.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\reducers\\orderReducers.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\reducers\\userReducers.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\contexts\\AuthOpenContext.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\contexts\\CartOpenContext.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\utils\\theme.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\contexts\\ThemeContext.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\RedirectBar.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\NavBar.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\contexts\\RedirectOpenContext.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\AuthPopup.js",["238","239","240","241"],"\r\nimport { forwardRef, useContext, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport { Button, Checkbox, CircularProgress, Dialog, FormControlLabel, Grid, Paper, Tab, Tabs, TextField, Typography } from '@material-ui/core';\r\n\r\nimport useStyles from './AuthPopup.styles';\r\nimport AuthOpenContext from '../../contexts/AuthOpenContext';\r\nimport booksIcon from '../../images/homework.png';\r\nimport { register, clearUserSigninErros, signin } from '../../actions/userActions';\r\n\r\nconst PARAM_FIRSTNAME = \"firstName\";\r\nconst PARAM_LASTNAME = \"lastName\";\r\nconst PARAM_EMAIL = \"email\";\r\nconst PARAM_PASSWORD = \"password\";\r\nconst PARAM_RE_PASSWORD = \"rePassword\";\r\n\r\nconst SignIn = forwardRef((props, ref) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const intl = useIntl();\r\n    const emailAddressTransl = intl.formatMessage({id: 'email_address', defaultMessage: \"Email Address\"});\r\n    const passwordTransl = intl.formatMessage({id: 'password', defaultMessage: \"Password\"});\r\n    const [ email, setEmail ] = useState();\r\n    const [ password, setPassword ] = useState(); \r\n    const [ emailErr, setEmailErr ] = useState();\r\n    const [ passwordErr, setPasswordErr ] = useState(); \r\n    const [error, setError] = useState();\r\n    const userSignin = useSelector(state => state.userSignin);\r\n    const { loading, userInfo, errors } = userSignin;\r\n    useEffect(() => {\r\n        if(errors?.length > 0) {\r\n            errors.forEach(err => {\r\n                switch (err?.param) {\r\n                    case PARAM_EMAIL:\r\n                        setEmailErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case PARAM_PASSWORD:\r\n                        setPasswordErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    default:\r\n                        setError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}))\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        return (() => clearErrors());\r\n    }, [errors]);\r\n    const clearErrors = () => {\r\n        dispatch(clearUserSigninErros());\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        dispatch(signin({ email, password }));\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n        close(){\r\n            clearErrors()\r\n        }\r\n    }));\r\n    return(\r\n        <div className={classes.tabContent}>\r\n            <div className={classes.iconBox}>\r\n                <img src={booksIcon} alt=\"Books\" className={classes.icon}/>\r\n            </div>\r\n            <Typography component=\"h1\" variant=\"h5\" className={classes.welcome}>\r\n                <FormattedMessage id='welcome' defaultMessage=\"Welcome to Atticus Literature\" />\r\n            </Typography>\r\n            {loading && <Typography component=\"p\" variant=\"body1\">Loading...</Typography>}\r\n            {error && <Typography component=\"p\" variant=\"body1\" color=\"error\">{error}</Typography>}\r\n            <form className={classes.form} noValidate={false} onSubmit={submitHandler}>\r\n                <TextField\r\n                    variant=\"outlined\" margin=\"normal\"\r\n                    required fullWidth autoFocus\r\n                    name=\"email\" type=\"email\" autoComplete=\"email\"      \r\n                    label={emailAddressTransl}             \r\n                    onChange={(e) => { clearErrors(); setEmail(e.target.value)}}\r\n                    error={Boolean(emailErr)}\r\n                    helperText={emailErr}\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\" margin=\"normal\"\r\n                    required fullWidth\r\n                    name=\"password\" type=\"password\" autoComplete=\"current-password\"\r\n                    label={passwordTransl}\r\n                    onChange={(e) => { clearErrors(); setPassword(e.target.value)}}\r\n                    error={Boolean(passwordErr)}\r\n                    helperText={passwordErr}\r\n                />\r\n                {/* <FormControlLabel\r\n                    control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                    label=\"Remember me\"\r\n                /> */}\r\n                {\r\n                    loading\r\n                    ?\r\n                    <CircularProgress size={30} />\r\n                    :\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth variant=\"contained\" color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        <FormattedMessage id='sign_in' defaultMessage=\"Sign In\" />\r\n                    </Button>\r\n                }\r\n            </form> \r\n            <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst SignUp = forwardRef((props, ref) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const intl = useIntl();\r\n    const firstnameTransl = intl.formatMessage({id: 'firstname', defaultMessage: \"First Name\"});\r\n    const lastnameTransl = intl.formatMessage({id: 'lastname', defaultMessage: \"Last Name\"});\r\n    const emailAddressTransl = intl.formatMessage({id: 'email_address', defaultMessage: \"Email Address\"});\r\n    const passwordTransl = intl.formatMessage({id: 'password', defaultMessage: \"Password\"});\r\n    const rePasswordTransl = intl.formatMessage({id: 're_password', defaultMessage: \"Re-Enter Password\"});\r\n    const receivePromoTransl = intl.formatMessage({id: 'receive_promo', defaultMessage: \"I want to receive inspiration, marketing promotions and updates via email.\"});\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [rePassword, setRePassword] = useState();\r\n    const [firstNameErr, setFirstNameErr] = useState();\r\n    const [lastNameErr, setLastNameErr] = useState();\r\n    const [emailErr, setEmailErr] = useState();\r\n    const [passwordErr, setPasswordErr] = useState();\r\n    const [rePasswordErr, setRePasswordErr] = useState();\r\n    const [error, setError] = useState();\r\n    const userSignin = useSelector(state => state.userSignin);\r\n    const { loading, errors } = userSignin;\r\n    useEffect(() => {\r\n        if(errors?.length > 0) {\r\n            errors.forEach(err => {\r\n                switch (err?.param) {\r\n                    case PARAM_FIRSTNAME:\r\n                        setFirstNameErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case PARAM_LASTNAME:\r\n                        setLastNameErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case PARAM_EMAIL:\r\n                        setEmailErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case PARAM_PASSWORD:\r\n                        setPasswordErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case PARAM_RE_PASSWORD:\r\n                        setRePasswordErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    default:\r\n                        setError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}))\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        return (() => clearErrors());\r\n    }, [errors]);\r\n    const clearErrors = () => {\r\n        dispatch(clearUserSigninErros());\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        dispatch(register({ firstName, lastName, email, password, rePassword }));\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n        close(){\r\n            clearErrors()\r\n        }\r\n    }));\r\n    return(\r\n        <div className={classes.tabContent}>\r\n            <div className={classes.iconBox}>\r\n                <img src={booksIcon} alt=\"Books\" className={classes.icon}/>\r\n            </div>\r\n            <Typography component=\"h1\" variant=\"h5\" className={classes.welcome}>\r\n                <FormattedMessage id='welcome' defaultMessage=\"Welcome to Atticus Literature\" />\r\n            </Typography>\r\n            {loading && <Typography component=\"p\" variant=\"body1\">Loading...</Typography>}\r\n            {error && <Typography component=\"p\" variant=\"body1\" color=\"error\">{error}</Typography>}\r\n            <form className={classes.form} noValidate={false} onSubmit={submitHandler}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField                          \r\n                            variant=\"outlined\" required fullWidth autoFocus\r\n                            name=\"firstName\" autoComplete=\"fname\"\r\n                            label={firstnameTransl}                       \r\n                            onChange={(e) => { clearErrors(); setFirstName(e.target.value)}}\r\n                            inputProps={{\r\n                                maxLength: 15,\r\n                            }}\r\n                            error={Boolean(firstNameErr)}\r\n                            helperText={firstNameErr}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            variant=\"outlined\" required fullWidth\r\n                            name=\"lastName\" autoComplete=\"lname\"\r\n                            label={lastnameTransl}\r\n                            onChange={(e) => { clearErrors(); setLastName(e.target.value)}}\r\n                            inputProps={{\r\n                                maxLength: 15,\r\n                            }}\r\n                            error={Boolean(lastNameErr)}\r\n                            helperText={lastNameErr}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\" required fullWidth\r\n                            name=\"email\" autoComplete=\"email\"\r\n                            label={emailAddressTransl}\r\n                            type=\"email\"  \r\n                            onChange={(e) => { clearErrors(); setEmail(e.target.value)}}\r\n                            error={Boolean(emailErr)}\r\n                            helperText={emailErr}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\" required fullWidth\r\n                            name=\"password\" autoComplete=\"current-password\"\r\n                            label={passwordTransl}\r\n                            type=\"password\"\r\n                            onChange={(e) => { clearErrors(); setPassword(e.target.value)}}\r\n                            error={Boolean(passwordErr)}\r\n                            helperText={passwordErr}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\" required fullWidth\r\n                            name=\"rePassword\" autoComplete=\"re-password\"\r\n                            label={rePasswordTransl}\r\n                            type=\"password\"\r\n                            onChange={(e) => { clearErrors(); setRePassword(e.target.value)}}\r\n                            error={Boolean(rePasswordErr)}\r\n                            helperText={rePasswordErr}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                            label={receivePromoTransl}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    loading\r\n                    ?\r\n                    <CircularProgress size={30} />\r\n                    :\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth variant=\"contained\" color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        <FormattedMessage id='sign_up' defaultMessage=\"Sign Up\" />\r\n                    </Button>\r\n                }\r\n            </form> \r\n            <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AuthPopup = () => {\r\n    const intl = useIntl();\r\n    const signInTransl = intl.formatMessage({id: 'sign_in', defaultMessage: \"Sign In\"});\r\n    const signUpTransl = intl.formatMessage({id: 'sign_up', defaultMessage: \"Sign Up\"});\r\n    const { isAuthOpen, setAuthOpen } = useContext(AuthOpenContext);\r\n    const { userInfo } = useSelector(state => state.userSignin);\r\n    const signInRef = useRef();\r\n    const signUpRef = useRef();\r\n    const [ tab, setTab ] = useState(0);\r\n\r\n    const handleClose = () => {\r\n        signInRef.current?.close();\r\n        signUpRef.current?.close();\r\n        setTab(0);\r\n        setAuthOpen(false);\r\n    }\r\n    const handleSwitchTab = (event, newValue) => {\r\n        setTab(newValue);\r\n    }\r\n    useEffect(() => {\r\n        if(userInfo) handleClose();\r\n    }, [userInfo])\r\n    return(\r\n        <Dialog open={isAuthOpen} onClose={handleClose} >\r\n            <Paper square>\r\n                <Tabs\r\n                    indicatorColor=\"primary\" textColor=\"primary\" \r\n                    centered variant=\"fullWidth\"\r\n                    value={tab} onChange={handleSwitchTab}\r\n                    aria-label=\"sign in - sign up\"\r\n                >\r\n                    <Tab label={signInTransl} />\r\n                    <Tab label={signUpTransl} />\r\n                </Tabs>\r\n                {\r\n                    tab === 0\r\n                    ?\r\n                    <SignIn ref={signInRef} />\r\n                    :\r\n                    <SignUp ref={signUpRef} />\r\n                }\r\n            </Paper>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default AuthPopup;","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\CopyRight.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\Notification.js",["242"],"\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useIntl } from 'react-intl';\r\nimport { Slide } from '@material-ui/core';\r\nimport { ERROR, INFO, REMOVE_NOTIS, SUCCESS, WARNING } from '../../constants/globalConstants';\r\n\r\nconst Notification = () => {\r\n    const dispatch = useDispatch();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const intl = useIntl();\r\n    const notis = useSelector(state => state.notis);\r\n    useEffect(() => {\r\n        if (notis.length > 0) {\r\n            notis.forEach(noti => {\r\n                if(!noti.id || !noti.type ||\r\n                    !(\r\n                        noti.type === ERROR ||\r\n                        noti.type === WARNING ||\r\n                        noti.type === INFO ||\r\n                        noti.type === SUCCESS\r\n                    )\r\n                ) return;\r\n                const msgTransl = intl.formatMessage({ id: noti.id, defaultMessage: noti.id });\r\n                enqueueSnackbar(msgTransl, {\r\n                    variant: noti.type,\r\n                    anchorOrigin: {\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    },\r\n                    TransitionComponent: Slide,\r\n                })\r\n            })\r\n            dispatch({\r\n                type: REMOVE_NOTIS\r\n            })\r\n        }\r\n    }, [notis])\r\n    return (\r\n        <></>\r\n    )\r\n}\r\n\r\nexport default Notification","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\CartBar.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\locales\\index.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\index.js",["243","244","245","246","247","248"],"\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport clsx from 'clsx';\r\nimport { CircularProgress, Container, Slide, Step, StepLabel, Stepper, Typography } from '@material-ui/core';\r\nimport CartOpenContext from '../../../contexts/CartOpenContext';\r\nimport { Elements as StripeElements } from '@stripe/react-stripe-js';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { getPublishKey } from '../../../utils/stripeAPI';\r\nimport FormShipping from './FormShipping';\r\nimport FormPayment from './FormPayment';\r\nimport FormComplete from './FormComplete';\r\nimport useStyles from './styles';\r\n\r\nconst OrderProcess = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const intl = useIntl();\r\n    const shippingInfoTransl = intl.formatMessage({id: 'shipping_info', defaultMessage: \"Shipping information\"});\r\n    const paymentTransl = intl.formatMessage({id: 'payment', defaultMessage: \"Payment\"});\r\n    function getSteps() {\r\n        return [shippingInfoTransl, paymentTransl];\r\n    }\r\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\r\n    const { isCartOpen, setCartOpen } = useContext(CartOpenContext);\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [stripePromise, setStripePromise] = useState(null)\r\n    const steps = getSteps();\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    const handleReset = () => {\r\n        setActiveStep(0);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (shippingFeeLoading || !city?.name || !state?.name || !country?.name ) history.replace(\"/checkout/\");\r\n    }, [city, state, country, shippingFeeLoading]);\r\n    useEffect(() => {\r\n        setCartOpen(false); // Always close cart bar in this screen\r\n    }, [isCartOpen]);\r\n    useEffect(() => {\r\n        (async() => {\r\n            const { publishKey } = await getPublishKey();\r\n            const stripe = loadStripe(publishKey);\r\n            setStripePromise(stripe);\r\n        })();\r\n    }, []);\r\n    return (\r\n        <div>\r\n        {\r\n            stripePromise\r\n            ?\r\n            <StripeElements stripe={stripePromise}>\r\n                <div className={classes.root}>\r\n                    <Container className={classes.container} maxWidth='md'>\r\n                        {\r\n                            activeStep !== 2\r\n                            &&\r\n                            <Stepper className={classes.gridStepper} activeStep={activeStep} alternativeLabel>\r\n                                {steps.map((label) => (\r\n                                    <Step key={label}>\r\n                                        <StepLabel>{label}</StepLabel>\r\n                                    </Step>\r\n                                ))}\r\n                            </Stepper>\r\n                        }\r\n                        <Slide in={activeStep === 0} direction=\"right\" mountOnEnter unmountOnExit>\r\n                            <div>\r\n                                <FormShipping handleNext={handleNext} activeStep={activeStep} />\r\n                            </div>\r\n                        </Slide>\r\n                        <Slide in={activeStep === 1} direction=\"right\" mountOnEnter unmountOnExit >\r\n                            <div>\r\n                                <FormPayment handleBack={handleBack} handleNext={handleNext} activeStep={activeStep} />\r\n                            </div>\r\n                        </Slide>\r\n                        <Slide in={activeStep === 2} direction=\"right\" mountOnEnter unmountOnExit >\r\n                            <div className={classes.orderCompleted}>\r\n                                <FormComplete />\r\n                            </div>\r\n                        </Slide>   \r\n                    </Container>\r\n                </div>       \r\n            </StripeElements>\r\n            :\r\n            <CircularProgress size={40} classes={{ colorPrimary: classes.circularProgress }} />\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderProcess;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Home\\index.js",["249","250"],"import React, { useContext, useEffect, useMemo, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Swiper from 'react-id-swiper';\r\nimport clsx from 'clsx';\r\nimport { \r\n    Box, Container, Hidden, Paper, Typography, IconButton, Avatar,\r\n    Card, CardMedia, CardContent, CardActions, Fade, Grid, Slide, \r\n} from \"@material-ui/core\";\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport ThemeContext from '../../../contexts/ThemeContext';\r\n\r\nimport useStyle from './styles';\r\nimport { FONT_F_PLAYFAIR } from '../../../utils/theme';\r\nimport spinnerImage from '../../../images/infinitySpinner.gif';\r\nimport authorAvatar from '../../../images/author-avatar.jpg';\r\n\r\nimport CartOpenContext from '../../../contexts/CartOpenContext';\r\nimport { addToCart, getBestsellers, getRecommendeds } from '../../../actions/productActions';\r\nimport { ADD_NOTI, INFO } from '../../../constants/globalConstants';\r\nimport { addToFavorites, removeFromFavorites } from '../../../actions/userActions';\r\n\r\nconst CARD_ITEM_HEIGHT = '450px';\r\nconst CARD_ITEM_WIDTH = '200px';\r\n\r\nconst isFavorited = (userInfo, productId) => {\r\n    const { favorites } = userInfo;\r\n    return favorites?.length > 0 && favorites.findIndex(favorite => favorite === productId) > -1;\r\n}\r\n\r\nconst CardItem = (props) => {\r\n    const classes = useStyle();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [isShown, setIsShown] = useState(false);\r\n    const { setCartOpen } = useContext(CartOpenContext);\r\n    const { userInfo } = useSelector(state => state.userSignin);\r\n    const item = props.item;\r\n    let priceDeclare;\r\n    switch (item.currency) {\r\n        case 'usd':\r\n            priceDeclare = `$ ${item.price}`;\r\n            break;\r\n        case 'vnd':\r\n            priceDeclare = `${item.price} vnđ`;\r\n            break;\r\n        default:\r\n            priceDeclare = `$ ${item.price}`;\r\n            break;\r\n    }\r\n    const redirect = () => {\r\n        history.push(`/product/${item._id}`);\r\n    }\r\n    const handleAddFavorites = () => {\r\n        if (userInfo) {\r\n            dispatch(addToFavorites(props.item._id));\r\n        } else {\r\n            dispatch({\r\n                type: ADD_NOTI,\r\n                payload: {\r\n                    id: 'signin_demand',\r\n                    type: INFO,\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const handleRemoveFavorites = () => {\r\n        dispatch(removeFromFavorites(props.item._id));\r\n    }\r\n    const addItemToCart = () => {\r\n        dispatch(addToCart(props.item));\r\n        setCartOpen(true);\r\n    } \r\n    return(\r\n        <>\r\n        <Card className={classes.cardItem} >\r\n            <CardMedia className={classes.cardMedia} image={item.image} title={item.title} \r\n                onMouseEnter={() => setIsShown(true)}\r\n                onMouseLeave={() => setIsShown(false)}\r\n                onClick={redirect}\r\n            />\r\n            <CardContent className={classes.cardContent}>\r\n                <Typography variant='body1' component='p'>{item.title}</Typography>\r\n            </CardContent>\r\n            <CardActions className={classes.cardActions}>\r\n                {\r\n                    userInfo && isFavorited(userInfo, props.item._id)\r\n                    ?\r\n                    <IconButton className={classes.iconButton} aria-label=\"Remove from favorites\" onClick={handleRemoveFavorites}>\r\n                        <FavoriteIcon color=\"secondary\"/>\r\n                    </IconButton>\r\n                    :\r\n                    <IconButton className={classes.iconButton} aria-label=\"Add to favorites\" onClick={handleAddFavorites}>\r\n                        <FavoriteBorderOutlinedIcon className={classes.icon}/>\r\n                    </IconButton>\r\n                }\r\n                <IconButton className={classes.iconButton} aria-label=\"Add to cart\" onClick={addItemToCart}>\r\n                    <AddShoppingCartIcon className={classes.icon} />\r\n                </IconButton>\r\n            </CardActions>\r\n        </Card>\r\n        <Hidden mdDown>\r\n            <Fade in={isShown} timeout={{appear: 100, enter: 300, exit: 100}} unmountOnExit>\r\n                <Box className={classes.quickView} \r\n                    onMouseEnter={() => setIsShown(true)}\r\n                    onMouseLeave={() => setIsShown(false)}\r\n                    onClick={redirect}\r\n                >\r\n                    <Typography variant='body1'>\r\n                        {priceDeclare}\r\n                    </Typography>\r\n                </Box>       \r\n            </Fade>\r\n        </Hidden>\r\n        <Hidden lgUp>\r\n            <Box className={classes.quickView} \r\n                onMouseEnter={() => setIsShown(true)}\r\n                onMouseLeave={() => setIsShown(false)}\r\n                onClick={redirect}\r\n            >\r\n                <Typography variant='body1'>\r\n                    {priceDeclare}\r\n                </Typography>\r\n            </Box>  \r\n        </Hidden>\r\n        </>\r\n    )\r\n}\r\n\r\nCardItem.propTypes = {\r\n    item: PropTypes.shape({\r\n        _id: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        image: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n    })\r\n}\r\n\r\nconst CoverflowEffect = (props) => {\r\n    const params = {\r\n        effect: 'coverflow',\r\n        centeredSlides: true,\r\n        slidesPerView: 'auto',\r\n        // loop: true,\r\n        coverflowEffect: {\r\n            rotate: 50,\r\n            stretch: 0,\r\n            depth: 100,\r\n            modifier: 1,\r\n            slideShadows: true\r\n        },\r\n        pagination: {\r\n            el: '.swiper-pagination'\r\n        },\r\n    }\r\n    const swiperSlide = { height: CARD_ITEM_HEIGHT,  width: CARD_ITEM_WIDTH, }\r\n    return (\r\n      <Swiper {...params}>    \r\n        {\r\n            props.listItems.map((item, i) => {\r\n                return (\r\n                    <div className=\"swiper-slide\" style={swiperSlide} key={i}>\r\n                        {props.render(item, i)}\r\n                    </div>)\r\n                }\r\n            )\r\n        }\r\n      </Swiper>\r\n    )\r\n};\r\n\r\nCoverflowEffect.propTypes = {\r\n    listItems: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            _id: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            image: PropTypes.string.isRequired,\r\n            price: PropTypes.number.isRequired,\r\n        })\r\n    )\r\n}\r\n\r\nconst MutipleSlidesPerView = (props) => {\r\n    const params = {\r\n        slidesPerView: 1,\r\n        spaceBetween: 30,\r\n        freeMode: true,\r\n        // loop: true,\r\n        direction: 'horizontal',\r\n        mousewheel: true,\r\n        grabCursor: true,\r\n        pagination: {\r\n            el: '.swiper-pagination',\r\n            clickable: true,\r\n        },\r\n        navigation: {\r\n            nextEl: '.swiper-button-next',\r\n            prevEl: '.swiper-button-prev',\r\n        },\r\n        breakpoints: {\r\n             // when window width is >= 600px\r\n            600: {\r\n                slidesPerView: 3,\r\n            },\r\n            960: {\r\n                slidesPerView: 4,\r\n            },\r\n            1280: {\r\n                slidesPerView: 5,\r\n            },\r\n            1450: {\r\n                slidesPerView: 6,\r\n            }\r\n        }\r\n    }\r\n    const swiperSlide = { height: CARD_ITEM_HEIGHT,  width: CARD_ITEM_WIDTH, }\r\n    return (\r\n      <Swiper {...params}>\r\n        {\r\n            props.listItems.map((item, i) => {\r\n                return (\r\n                    <div className=\"swiper-slide\" style={swiperSlide} key={i}>\r\n                        {props.render(item, i)}\r\n                    </div>)\r\n                }\r\n            )\r\n        }\r\n      </Swiper>\r\n    )\r\n};\r\n\r\nMutipleSlidesPerView.propTypes = {\r\n    listItems: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            _id: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            image: PropTypes.string.isRequired,\r\n            price: PropTypes.number.isRequired,\r\n        })\r\n    )\r\n}\r\n\r\nconst Home = () => {\r\n    const classes = useStyle();\r\n    const dispatch = useDispatch();\r\n    const {isDarkMode} = useContext(ThemeContext);\r\n    const bestsellerProducts = useSelector(state => state.bestsellerProducts);\r\n    const { bestsellers, loading: bestsellersLoading } = useMemo(() => bestsellerProducts, [bestsellerProducts]);\r\n    const recommendedProducts = useSelector(state => state.recommendedProducts);\r\n    const { recommendeds, loading: recommendedsLoading } = useMemo(() => recommendedProducts, [recommendedProducts]);\r\n    useEffect(() => {\r\n        dispatch(getBestsellers());\r\n        dispatch(getRecommendeds());\r\n    }, []);\r\n    return(\r\n        <Container className={classes.container} maxWidth='xl'>\r\n            <Paper className={classes.cover}>\r\n                <Box className={classes.coverBox}>\r\n                    <Hidden xsDown>\r\n                        <Typography className={classes.coverQuote} variant=\"h3\" component=\"h2\">\r\n                            A little reading is all the therapy a person needs sometimes.\r\n                        </Typography>\r\n                        <br />\r\n                        <Typography className={classes.coverQuote} variant=\"h5\" component=\"p\">\r\n                            - anonymous -\r\n                        </Typography>\r\n                    </Hidden>\r\n                    <Hidden smUp>\r\n                        <Typography className={classes.coverQuote} variant=\"h3\" component=\"h2\">\r\n                            Reading is dreaming with open eyes.\r\n                        </Typography>\r\n                        <br />\r\n                        <Typography className={classes.coverQuote} variant=\"subtitle1\" component=\"p\">\r\n                            - Anissa Trisdianty -\r\n                        </Typography>\r\n                    </Hidden>\r\n                </Box>\r\n            </Paper>\r\n            {\r\n                !isDarkMode && <Card className={classes.sectionBack}/>\r\n            }\r\n            <Hidden xsDown>\r\n                <Container className={clsx(classes.section, classes.bestsellers)} maxWidth='xl'>\r\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\r\n                        <FormattedMessage id='bestsellers' defaultMessage=\"Bestsellers\" />\r\n                    </Typography>\r\n                    <hr className={classes.divider}/>\r\n                    {\r\n                        bestsellersLoading\r\n                        ? \r\n                        <div className={classes.loading}>\r\n                            <p>Loading...</p>\r\n                            <img src={spinnerImage} alt=\"Loading...\"/>\r\n                        </div>\r\n                        :\r\n                        <MutipleSlidesPerView \r\n                            render={(item, i) => <CardItem key={`bestsellers_xs_${i}`} item={item} />}\r\n                            listItems={bestsellers}\r\n                        />\r\n                    }\r\n                </Container>\r\n                <Container className={clsx(classes.section, classes.recommendeds)} maxWidth='xl'>\r\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\r\n                        <FormattedMessage id='recommended_books' defaultMessage=\"Recommended Books\" />\r\n                    </Typography>\r\n                    <hr className={classes.divider}/>\r\n                    {\r\n                        recommendedsLoading\r\n                        ?\r\n                        <div className={classes.loading}>\r\n                            <p>Loading...</p>\r\n                            <img src={spinnerImage} alt=\"Loading...\"/>\r\n                        </div>\r\n                        :\r\n                        <MutipleSlidesPerView \r\n                            render={(item, i) => <CardItem key={`recommendeds_xs_${i}`} item={item} />}\r\n                            listItems={recommendeds}    \r\n                        />\r\n                    }\r\n                </Container>\r\n            </Hidden>\r\n            <Hidden smUp>\r\n                <Container className={clsx(classes.section, classes.bestsellers)} maxWidth='xl'>\r\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\r\n                        <FormattedMessage id='bestsellers' defaultMessage=\"Bestsellers\" />\r\n                    </Typography>\r\n                    <hr className={classes.divider}/>\r\n                    {\r\n                        bestsellersLoading\r\n                        ?\r\n                        <div className={classes.loading}>\r\n                            <p>Loading...</p>\r\n                            <img src={spinnerImage} alt=\"Loading...\"/>\r\n                        </div>\r\n                        :\r\n                        <CoverflowEffect \r\n                            render={(item, i) => <CardItem key={`bestsellers_sm_${i}`} item={item} />}\r\n                            listItems={bestsellers}\r\n                        />\r\n                    }\r\n                </Container>\r\n                <Container className={clsx(classes.section, classes.recommendeds)} maxWidth='xl'>\r\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\r\n                        <FormattedMessage id='recommended_books' defaultMessage=\"Recommended Books\" />\r\n                    </Typography>\r\n                    <hr className={classes.divider}/>\r\n                    {\r\n                        recommendedsLoading\r\n                        ?\r\n                        <div className={classes.loading}>\r\n                            <p>Loading...</p>\r\n                            <img src={spinnerImage} alt=\"Loading...\"/>\r\n                        </div>\r\n                        :\r\n                        <CoverflowEffect \r\n                            render={(item, i) => <CardItem key={`recommendeds_sm_${i}`} item={item} />}\r\n                            listItems={recommendeds}\r\n                        />\r\n                    }\r\n                </Container>\r\n            </Hidden>\r\n            <Container className={clsx(classes.section, classes.author)} maxWidth='xl'>\r\n                <Box className={classes.sectionTitle}>\r\n                    <Typography variant=\"body1\" component=\"h3\" style={{fontFamily: FONT_F_PLAYFAIR}}>\r\n                        <FormattedMessage id='this_month' defaultMessage=\"This month's\" />\r\n                    </Typography>\r\n                    <Typography variant=\"h3\" component=\"h3\" style={{fontFamily: FONT_F_PLAYFAIR}}>\r\n                        <FormattedMessage id='favorite_author' defaultMessage=\"Favorite Author\" />\r\n                    </Typography>\r\n                </Box>\r\n                <hr className={classes.divider}/>\r\n                <Container maxWidth='md'>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={6} style={{textAlign: 'center'}}>\r\n                            <Avatar className={classes.authorAvatar} alt=\"Author Avatar\" src={authorAvatar} variant=\"rounded\" />\r\n                            <Typography className={classes.authorName} variant=\"h3\" component=\"h4\">Trần Văn Đức</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <Typography className={classes.authorQuote}  variant=\"subtitle1\" component=\"p\">\r\n                                <i><FormattedMessage id=\"const_auth_quote\" defaultMessage=\"Author Quote\"></FormattedMessage></i>\r\n                            </Typography>\r\n                            <Typography className={classes.authorPresent}  variant=\"h5\" component=\"p\">\r\n                                <FormattedMessage id=\"const_auth_present\" defaultMessage=\"Author Presentation\"></FormattedMessage>\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>  \r\n                </Container>              \r\n            </Container>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\index.js",["251"],"import { useContext, useEffect, useMemo, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { Box, Card, CardActions, CardContent, CardMedia, Container, Fade, IconButton, Typography } from '@material-ui/core';\r\nimport CartOpenContext from '../../../contexts/CartOpenContext';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\n\r\nimport Catalogue from './Catalogue';\r\nimport useStyle from './styles';\r\nimport boxEmptyImage from '../../../images/box_empty.png';\r\nimport { addToCart, getStore } from '../../../actions/productActions';\r\nimport { addToFavorites, removeFromFavorites } from '../../../actions/userActions';\r\nimport { ADD_NOTI, INFO } from '../../../constants/globalConstants';\r\n\r\nconst isFavorited = (userInfo, productId) => {\r\n    const { favorites } = userInfo;\r\n    return favorites?.length > 0 && favorites.findIndex(favorite => favorite === productId) > -1;\r\n}\r\n\r\nconst CardItem = (props) => {\r\n    const classes = useStyle();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [isShown, setIsShown] = useState(false);\r\n    const { setCartOpen } = useContext(CartOpenContext);\r\n    const { userInfo } = useSelector(state => state.userSignin);\r\n    const item = props.item;\r\n    let priceDeclare;\r\n    switch (item.currency) {\r\n        case 'usd':\r\n            priceDeclare = `$ ${item.price}`;\r\n            break;\r\n        case 'vnd':\r\n            priceDeclare = `${item.price} vnđ`;\r\n            break;\r\n        default:\r\n            priceDeclare = `$ ${item.price}`;\r\n            break;\r\n    }\r\n    const redirect = () => {\r\n        history.push(`/product/${item._id}`)\r\n    }\r\n    const handleAddFavorites = () => {\r\n        if (userInfo) {\r\n            dispatch(addToFavorites(item._id));\r\n        } else {\r\n            dispatch({\r\n                type: ADD_NOTI,\r\n                payload: {\r\n                    id: 'signin_demand',\r\n                    type: INFO,\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const handleRemoveFavorites = () => {\r\n        dispatch(removeFromFavorites(item._id));\r\n    }\r\n    const addItemToCart = () => {\r\n        dispatch(addToCart(item));\r\n        setCartOpen(true);\r\n    } \r\n    return(\r\n        <>\r\n        <Card className={classes.cardItem} >\r\n            <CardMedia className={classes.cardMedia} image={item.image} title={item.title} \r\n                onMouseEnter={() => setIsShown(true)}\r\n                onMouseLeave={() => setIsShown(false)}\r\n                onClick={redirect}\r\n            />\r\n            <CardContent className={classes.cardContent}>\r\n                <Typography variant='body1' component='p'>{item.title}</Typography>\r\n            </CardContent>\r\n            <CardActions className={classes.cardActions}>\r\n                {\r\n                    userInfo && isFavorited(userInfo, item._id)\r\n                    ?\r\n                    <IconButton className={classes.iconButton} onClick={handleRemoveFavorites} aria-label=\"Remove from favorites\">\r\n                        <FavoriteIcon color=\"secondary\"/>\r\n                    </IconButton>\r\n                    :\r\n                    <IconButton className={classes.iconButton} onClick={handleAddFavorites} aria-label=\"Add to favorites\">\r\n                        <FavoriteBorderOutlinedIcon className={classes.icon}/>\r\n                    </IconButton>\r\n                }\r\n                <IconButton className={classes.iconButton} aria-label=\"Add to cart\" onClick={addItemToCart}>\r\n                    <AddShoppingCartIcon className={classes.icon} />\r\n                </IconButton>\r\n            </CardActions>\r\n        </Card>\r\n        <Fade in={isShown} timeout={{appear: 100, enter: 300, exit: 100}} unmountOnExit>\r\n            <Box className={classes.quickView} \r\n                onMouseEnter={() => setIsShown(true)}\r\n                onMouseLeave={() => setIsShown(false)}\r\n                onClick={redirect}\r\n            >\r\n                <Typography variant='body1'>\r\n                    {priceDeclare}\r\n                </Typography>\r\n            </Box>       \r\n        </Fade>\r\n        </>\r\n    )\r\n}\r\n\r\nCardItem.propTypes = {\r\n    item: PropTypes.shape({\r\n        _id: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        image: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n    })\r\n}\r\n\r\nconst Bookstore = () => {\r\n    const PRODUCTS_PER_PAGE = 15;\r\n    let searchArray = [];\r\n    let searchObj = {};\r\n    const classes = useStyle();\r\n    const { search } = useLocation();\r\n    const dispatch = useDispatch();\r\n    const catalogueComponent = useMemo(() => <Catalogue />, []);\r\n    const language = useSelector(state => state.language);\r\n    const { products } = useSelector(state => state.store);\r\n    let countPages = Math.ceil(products.length/PRODUCTS_PER_PAGE) > 0 ? Math.ceil(products.length/PRODUCTS_PER_PAGE) : 1;\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentProducts, setCurrentProducts] = useState(products.slice(0, PRODUCTS_PER_PAGE));\r\n    const handlePageChange = (event, value) => {\r\n        setCurrentPage(value);\r\n        setCurrentProducts(products.slice((value-1)*PRODUCTS_PER_PAGE, value*PRODUCTS_PER_PAGE));\r\n    }\r\n    useEffect(() => {\r\n        searchArray = search.slice(1).split('&');\r\n        searchArray.forEach(equation => {\r\n            const key = equation.split('=')[0];\r\n            const value = equation.split('=')[1];\r\n            searchObj[key] = value;\r\n        })\r\n        dispatch(getStore(searchObj));\r\n    }, [search]);\r\n    useEffect(() => {\r\n        setCurrentProducts(products.slice(0, PRODUCTS_PER_PAGE));\r\n    }, [products])\r\n    return (\r\n        <div className={classes.root}>\r\n            <Container className={classes.container} maxWidth='xl'>\r\n                <div className={classes.title}>\r\n                {\r\n                    language === 'vi'\r\n                    ?\r\n                    <>\r\n                    <Typography variant='h3' component='h1'>Hiệu sách</Typography>\r\n                    <Typography variant='h5' component='h1'>của Atticus</Typography>\r\n                    </>\r\n                    :\r\n                    <>\r\n                    <Typography variant='h5' component='h1'>Atticus's</Typography>\r\n                    <Typography variant='h3' component='h1'>Bookstore</Typography>\r\n                    </>\r\n                }\r\n                </div>\r\n                <div className={classes.content}>\r\n                    <div className={classes.catalogue}>\r\n                        {catalogueComponent}\r\n                    </div>\r\n                    <div className={classes.products}>\r\n                       {\r\n                           products.length > 0\r\n                           ?\r\n                           <>\r\n                           <div className={classes.table}>\r\n                                {\r\n                                    currentProducts.map((item, i) => (\r\n                                        <div key={i} className={classes.item}>\r\n                                            <CardItem item={item}/>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                            <div className={classes.pagination}>\r\n                                <Pagination count={countPages} page={currentPage} onChange={handlePageChange} />\r\n                            </div>\r\n                            </>\r\n                            :\r\n                            <div className={classes.emptySection}>\r\n                                <div className={classes.emptyImage}>\r\n                                    <img src={boxEmptyImage} alt=\"Box empty\" />\r\n                                </div>\r\n                                <div>\r\n                                <Typography>\r\n                                    <FormattedMessage id='no_result' defaultMessage='Currently no result' />\r\n                                </Typography>\r\n                                </div>\r\n                            </div>\r\n                       }\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bookstore;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\PageNotFound\\index.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Product\\index.js",["252"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { Button, Container, Typography, TextField, IconButton, Collapse, Box } from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\r\nimport MinusIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nimport useStyle from './styles';\r\nimport CartOpenContext from '../../../contexts/CartOpenContext';\r\nimport { addMultipleToCart, getItemDetail } from '../../../actions/productActions';\r\nimport { addToFavorites, removeFromFavorites } from '../../../actions/userActions';\r\nimport { ADD_NOTI, INFO } from '../../../constants/globalConstants';\r\n\r\nconst MINUS_INTRO_ICON = 'MINUS_INTRO_ICON';\r\nconst MINUS_SHIPPING_ICON = 'MINUS_SHIPPING_ICON';\r\nconst MINUS_POLICY_ICON = 'MINUS_POLICY_ICON';\r\nconst ADD_INTRO_ICON = 'ADD_INTRO_ICON';\r\nconst ADD_SHIPPING_ICON = 'ADD_SHIPPING_ICON';\r\nconst ADD_POLICY_ICON = 'ADD_POLICY_ICON';\r\n\r\nconst isFavorited = (userInfo, productId) => {\r\n    const { favorites } = userInfo;\r\n    return favorites?.length > 0 && favorites.findIndex(favorite => favorite === productId) > -1;\r\n}\r\n\r\nconst Product = () => {\r\n    const classes = useStyle();\r\n    const dispatch = useDispatch();\r\n    const { id: productId } = useParams();\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [expandedIntro, setExpandedIntro] = useState(true);\r\n    const [expandedShipping, setExpandedShipping] = useState(false);\r\n    const [expandedPolicy, setExpandedPolicy] = useState(false);\r\n    const { setCartOpen } = useContext(CartOpenContext);\r\n    const { userInfo } = useSelector(state => state.userSignin);\r\n    const viewingProduct = useSelector(state => state.viewingProduct);\r\n    const { product, error } = viewingProduct;\r\n    let priceDeclare;\r\n    if(product) {\r\n        switch (product.currency) {\r\n            case 'usd':\r\n                priceDeclare = `$ ${product.price}`;\r\n                break;\r\n            case 'vnd':\r\n                priceDeclare = `${product.price} vnđ`;\r\n                break;\r\n            default:\r\n                priceDeclare = `$ ${product.price}`;\r\n                break;\r\n        }\r\n    }\r\n    const handleAddFavorites = () => {\r\n        if (userInfo) {\r\n            dispatch(addToFavorites(product._id));\r\n        } else {\r\n            dispatch({\r\n                type: ADD_NOTI,\r\n                payload: {\r\n                    id: 'signin_demand',\r\n                    type: INFO,\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const handleRemoveFavorites = () => {\r\n        dispatch(removeFromFavorites(product._id));\r\n    }\r\n    const addQuantity = (e) => {\r\n        const newQuantity = e.target.value;\r\n        if(!newQuantity) {\r\n            return\r\n        } else if(newQuantity < 1) {\r\n            setQuantity(1);\r\n            e.target.value = 1;\r\n        } else setQuantity(newQuantity);\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getItemDetail(productId));\r\n    }, [productId])\r\n    const handleExpand = (target) => {\r\n        switch (target) {\r\n            case ADD_INTRO_ICON:\r\n                setExpandedIntro(true);\r\n                setExpandedShipping(false);\r\n                setExpandedPolicy(false);\r\n                break;\r\n            case ADD_SHIPPING_ICON:\r\n                setExpandedIntro(false);\r\n                setExpandedShipping(true);\r\n                setExpandedPolicy(false);\r\n                break;\r\n            case ADD_POLICY_ICON:\r\n                setExpandedIntro(false);\r\n                setExpandedShipping(false);\r\n                setExpandedPolicy(true);\r\n                break;\r\n            case MINUS_INTRO_ICON:\r\n                setExpandedIntro(false);\r\n                break;\r\n            case MINUS_SHIPPING_ICON:\r\n                setExpandedShipping(false);\r\n                break;\r\n            case MINUS_POLICY_ICON:\r\n                setExpandedPolicy(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }     \r\n    };\r\n    const handleAddCart = () => {\r\n        const addingProduct = {...product, quantity};\r\n        dispatch(addMultipleToCart(addingProduct));\r\n        setCartOpen(true);\r\n    }\r\n    return(\r\n        <div className={classes.root}>\r\n            {\r\n                product\r\n                ?\r\n                <Container className={classes.container} maxWidth='md'>\r\n                    <div className={classes.gridImage}>\r\n                        <img src={product.image} alt={product.title} className={classes.productImage}/>\r\n                        {\r\n                            userInfo && isFavorited(userInfo, product._id)\r\n                            ?\r\n                            <IconButton className={classes.favoriteButton} aria-label=\"Remove from favorites\" onClick={handleRemoveFavorites}>\r\n                                <FavoriteIcon color=\"secondary\"/>\r\n                            </IconButton>\r\n                            :\r\n                            <IconButton className={classes.favoriteButton} aria-label=\"Add to favorites\" onClick={handleAddFavorites}>\r\n                                <FavoriteBorderOutlinedIcon className={classes.icon}/>\r\n                            </IconButton>\r\n                        }\r\n                    </div>\r\n                    <div className={classes.mainInfo}>\r\n                        <div className={classes.mainInfoTitle}>\r\n                            <Typography variant='h5' component='h1'>\r\n                                {product.title}\r\n                            </Typography>\r\n                            <Typography variant='h6' component='p'>\r\n                                <FormattedMessage id='author_by' defaultMessage='by' />{' '}\r\n                                {product.authorIds.reduce((string, author, index) => {\r\n                                    if(index === product.authorIds.length -1 ) return string += author.name;\r\n                                    else return string += `${author.name}, `;                                                  \r\n                                }, '')}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.mainInfoActions}>\r\n                            <div className={classes.infoPrice}>\r\n                                <Typography variant='h5' component='p'>\r\n                                    {priceDeclare}\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.infoQuantity}>\r\n                                <Typography variant='body1' component='p'>\r\n                                    <FormattedMessage id='quantity' defaultMessage='Quantity' /> :\r\n                                </Typography> \r\n                                <TextField id='product-quantity' className={classes.infoTextfield} \r\n                                    type='number' variant='outlined' size='small'\r\n                                    defaultValue={quantity}\r\n                                    onChange={(e) => addQuantity(e)} />\r\n                            </div>\r\n                            <div className={classes.infoAdd}>\r\n                                <Button className={classes.infoAddButton} onClick={handleAddCart}>\r\n                                    <FormattedMessage id='add_to_cart' defaultMessage='Add to Cart' />\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.mainInfoCollapses}>\r\n                            <div className={classes.collapseSection}>\r\n                                <div className={classes.collapseTitle}>\r\n                                    <Typography variant='h6' component='h3'>\r\n                                        <FormattedMessage id='intro' defaultMessage='Introduction' />\r\n                                    </Typography>\r\n                                    {\r\n                                        expandedIntro\r\n                                        ?\r\n                                        <IconButton id={MINUS_INTRO_ICON} onClick={e => handleExpand(MINUS_INTRO_ICON)} >\r\n                                            <MinusIcon fontSize='small' className={classes.collapseIcon}/>\r\n                                        </IconButton>\r\n                                        :\r\n                                        <IconButton id={ADD_INTRO_ICON} onClick={e => handleExpand(ADD_INTRO_ICON)} >\r\n                                            <AddIcon fontSize='small' className={classes.collapseIcon}/>\r\n                                        </IconButton>\r\n                                    }\r\n                                </div>\r\n                                <Collapse in={expandedIntro}>\r\n                                    <Typography variant='body1' component='p'>\r\n                                        {product.description}\r\n                                    </Typography>\r\n                                </Collapse>\r\n                            </div>\r\n                            <div className={classes.collapseSection}>\r\n                                <div className={classes.collapseTitle}>\r\n                                    <Typography variant='h6' component='h3'>\r\n                                        <FormattedMessage id='shipping' defaultMessage='Shipping Info' />\r\n                                    </Typography>\r\n                                    {\r\n                                        expandedShipping\r\n                                        ?\r\n                                        <IconButton id={MINUS_SHIPPING_ICON} onClick={e => handleExpand(MINUS_SHIPPING_ICON)}>\r\n                                            <MinusIcon fontSize='small' className={classes.collapseIcon}/>\r\n                                        </IconButton>\r\n                                        :\r\n                                        <IconButton id={ADD_SHIPPING_ICON} onClick={e => handleExpand(ADD_SHIPPING_ICON)}>\r\n                                            <AddIcon fontSize='small' className={classes.collapseIcon}/>\r\n                                        </IconButton>\r\n                                    }\r\n                                </div>\r\n                                <Collapse in={expandedShipping}>\r\n                                    <Typography variant='body1' component='p'>\r\n                                        <FormattedMessage id='shipping_policy' \r\n                                            defaultMessage={`Free delivery within Hanoi & Ho Chi Minh City in maximum 2 hours.\r\n                                            Delivery within a maximum of 1 week across the territory of Vietnam.`} />\r\n                                    </Typography>\r\n                                </Collapse>\r\n                            </div>\r\n                            <div className={classes.collapseSection}>\r\n                                <div className={classes.collapseTitle}>\r\n                                    <Typography variant='h6' component='h3'>\r\n                                        <FormattedMessage id='policy' defaultMessage='Return & Refund Policy' />\r\n                                    </Typography>\r\n                                    {\r\n                                        expandedPolicy\r\n                                        ?\r\n                                        <IconButton id={MINUS_POLICY_ICON} onClick={e => handleExpand(MINUS_POLICY_ICON)}>\r\n                                            <MinusIcon fontSize='small' className={classes.collapseIcon}/>\r\n                                        </IconButton>\r\n                                        :\r\n                                        <IconButton id={ADD_POLICY_ICON} onClick={e => handleExpand(ADD_POLICY_ICON)}>\r\n                                            <AddIcon fontSize='small' className={classes.collapseIcon}/>\r\n                                        </IconButton>\r\n                                    }\r\n                                </div>\r\n                                <Collapse in={expandedPolicy}>\r\n                                    <Typography variant='body1' component='p'>\r\n                                        <FormattedMessage id='return_policy' \r\n                                            defaultMessage={`If you are not satisfied with a product you ordered from our store or if it is defective or damaged, you can return it to us within 3 days of the delivery date, and we will refund you or will replace the entire item.`} />\r\n                                    </Typography>\r\n                            </Collapse>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.additionalInfo}>\r\n                        <Box className={classes.ratingBox} component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                            <Rating name=\"disabled\" value={product.rating} disabled />\r\n                            {\r\n                                product.rating\r\n                                ?\r\n                                <Typography variant='body1' component='p' style={{paddingLeft: '8px'}}>\r\n                                    {`${product.rating} `}\r\n                                    <FormattedMessage id='stars' defaultMessage='stars' />\r\n                                </Typography>\r\n                                :\r\n                                <></>\r\n                            }\r\n                           \r\n                            <Typography variant='body1' component='p' style={{paddingLeft: '8px'}}>\r\n                                {`(${product.reviewsCount ? 0 : product.reviewsCount} `}\r\n                                <FormattedMessage id='reviews' defaultMessage='reviews' />\r\n                                {')'}\r\n                            </Typography>\r\n                        </Box>\r\n                    </div>\r\n                </Container>\r\n                :\r\n                (\r\n                    error\r\n                    ?\r\n                    <div className={classes.imageSection}>\r\n                        <div className={classes.errorImage}/>\r\n                        <a className={classes.attribute} href=\"http://www.freepik.com\" target='_blank' rel=\"noreferrer\">\r\n                            Image designed by pch.vector / Freepik\r\n                        </a>\r\n                    </div>\r\n                    :\r\n                    <div className={classes.imageSection}>\r\n                        <div className={classes.loadingImage}/>\r\n                        <a className={classes.attribute} href=\"http://www.freepik.com\" target='_blank' rel=\"noreferrer\">\r\n                            Image designed by vectorjuice / Freepik\r\n                        </a>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Product;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Checkout\\index.js",["253","254","255","256","257"],"\r\nimport {  useContext, useEffect, useState } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage, injectIntl, useIntl } from 'react-intl';\r\nimport cscAPI from 'country-state-city'\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Button, Card, Collapse, Container, Divider, Hidden, IconButton, Paper, Snackbar, TextField, Typography } from '@material-ui/core';\r\nimport CartOpenContext from '../../../contexts/CartOpenContext';\r\nimport RemoveIcon from '@material-ui/icons/HighlightOff';\r\nimport MinusIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TagIcon from '@material-ui/icons/LocalOfferOutlined';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\nimport { Alert as MuiAlert, Autocomplete } from '@material-ui/lab';\r\n\r\nimport useStyles from './styles';\r\nimport { updateLocalCart, removeFromLocalCart } from '../../../actions/productActions';\r\nimport { changeShippingFee, getShippingFee, saveShippingAddress } from '../../../actions/orderActions';\r\nimport { retailPriceCalc, wholeSaleCalc, subtotalCalc, shippingFeeCalc, totalSumCalc, totalSumNumber } from '../../../utils/priceCalculator';\r\n\r\nconst Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst CardItem = ({item}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const retailPrice = retailPriceCalc(item);\r\n    const wholeSale = wholeSaleCalc(item);\r\n    const minusQuantity = () => {\r\n        if(item.quantity === 1) return;\r\n        else {\r\n            const product = {...item, quantity: item.quantity-1};\r\n            dispatch(updateLocalCart(product));\r\n        }\r\n    }\r\n    const addQuantity = () => {\r\n        const product = {...item, quantity: item.quantity+1};\r\n        dispatch(updateLocalCart(product));\r\n    }\r\n    const removeItem = () => {\r\n        dispatch(removeFromLocalCart(item._id));\r\n    }\r\n    return (\r\n        <Card className={classes.cartItem}>\r\n            <div className={classes.cartItemMedia} \r\n                style={{backgroundImage: `url(${item.image}`}}\r\n                onClick={e => history.push(`/product/${item._id}`)}\r\n            />\r\n            <div className={classes.cardItemContent}>\r\n                <div className={classes.cartItemInfo}>\r\n                    <div className={classes.cartItemTitle}>\r\n                        <Typography variant='body1' component='p'>\r\n                            {item.title}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.cartItemAuthor}>\r\n                        <Typography variant='body2' component='p'>\r\n                            <FormattedMessage id='author_by' defaultMessage='by' />{' '}\r\n                            {item.authorIds.reduce((string, author, index) => {\r\n                                if(index === item.authorIds.length -1 ) return string += author.name;\r\n                                else return string += `${author.name}, `;                                                  \r\n                            }, '')}\r\n                        </Typography>\r\n                    </div>\r\n                    <Typography variant='body2' component='p'>{retailPrice}</Typography>\r\n                </div>\r\n                <div className={classes.cartItemQuantity}>\r\n                    <IconButton onClick={minusQuantity} className={clsx(classes.actionIcon, item.quantity === 1 && classes.disable)} >\r\n                        <MinusIcon fontSize='small' />\r\n                    </IconButton>\r\n                    <Typography variant='body1' component='p'>{item.quantity}</Typography>\r\n                    <IconButton onClick={addQuantity} className={classes.actionIcon} >\r\n                        <AddIcon fontSize='small' />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className={classes.cartItemWholesale}>\r\n                <div className={classes.saleNumber}>\r\n                    <Typography variant='h6' component='p'>{wholeSale}</Typography>                 \r\n                </div>\r\n                <div className={classes.saleCancel}>                 \r\n                    <IconButton onClick={removeItem} className={clsx(classes.actionIcon, classes.removeIcon)}>\r\n                        <RemoveIcon fontSize='small' />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nCardItem.propTypes = {\r\n    item: PropTypes.shape({\r\n        _id: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        image: PropTypes.string.isRequired,\r\n        authorIds: PropTypes.arrayOf(PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n        })),\r\n        price: PropTypes.number.isRequired,\r\n        quantity: PropTypes.number.isRequired,\r\n    })\r\n}\r\n\r\nconst PromoCode = ({ intl }) => {\r\n    const classes = useStyles();\r\n    const placeholder = intl.formatMessage({ id: 'enter_promo', defaultMessage: 'Enter a promo code' });\r\n    const [code, setCode] = useState('');\r\n    const [promoError, setPromoError] = useState(false);\r\n    const closeAlert = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }  \r\n        setPromoError(false);\r\n    };\r\n    const changeCode = (e) => {\r\n        setCode(e.target.value);\r\n    }\r\n    const keyDown = (e) => {\r\n        if(e.key === \"Enter\") submitCode();\r\n    }\r\n    const submitCode = () => {\r\n        setCode('');\r\n        setPromoError(true);\r\n    }     \r\n    return(\r\n        <>\r\n        <TextField\r\n            inputRef={input => input && input.focus()}\r\n            InputProps={{\r\n                className: classes.themeTextColor\r\n            }}\r\n            placeholder={`${placeholder}...`}\r\n            variant='outlined' size='small'\r\n            value={code}\r\n            onChange={e => changeCode(e)}\r\n            onKeyDown={e => keyDown(e)}\r\n        />\r\n        <Button \r\n            className={clsx(classes.themeTextColor, classes.themeNavbarBackground)} \r\n            variant='outlined' style={{height: '40px'}}\r\n            onClick={submitCode}\r\n        >\r\n            <FormattedMessage id='apply' defaultMessage='Apply' />\r\n        </Button>\r\n        <Snackbar open={promoError} autoHideDuration={6000} onClose={closeAlert}>\r\n            <Alert onClose={closeAlert} severity=\"info\">\r\n                <FormattedMessage id='invalid_promo' defaultMessage='Invalid promo code' />\r\n            </Alert>\r\n        </Snackbar>\r\n        </>\r\n    )\r\n}\r\n\r\nconst AddNote = ({intl}) => {\r\n    const classes = useStyles();\r\n    const placeholder = intl.formatMessage({ id: 'note_description', defaultMessage: 'Instructions? Special requests? Add them here.' });\r\n    const [note, setNote] = useState(\"\");\r\n    return(\r\n        <TextField\r\n            InputProps={{\r\n                className: classes.themeTextColor\r\n            }}\r\n            inputRef={input => input && input.focus()}\r\n            placeholder={placeholder}\r\n            variant='outlined' fullWidth\r\n            multiline rows={4} value={note}\r\n            onChange={e => {\r\n                setNote(e.target.value)\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nconst Checkout = () => {\r\n    const classes = useStyles();\r\n    const intl = useIntl();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { isCartOpen, setCartOpen } = useContext(CartOpenContext);\r\n    const { cartList } = useSelector(state => state.cart);\r\n    const subtotalDeclare = subtotalCalc(cartList);\r\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\r\n    const [ totalSum, setTotalSum ] = useState();\r\n    const [ openPromo, setOpenPromo ] = useState(false);\r\n    const [ openNote, setOpenNote ] = useState(false);\r\n    const PromoCodeComponent = injectIntl(({intl}) => \r\n        <PromoCode intl={intl} />\r\n    );\r\n    const AddNoteComponent = injectIntl(({intl}) => \r\n        <AddNote intl={intl} />\r\n    );\r\n    const countries = cscAPI.getAllCountries();\r\n    const [ states, setStates ] = useState([]);\r\n    const [ cities, setCities ] = useState([]);\r\n    const [ selectedCountry, setSelectedCountry ] = useState(country || {});\r\n    const [ selectedState, setSelectedState ] = useState(state || {});\r\n    const [ selectedCity, setSelectedCity ] = useState(city || {});\r\n    const [ inputCountry, setInputCountry ] = useState(\"\");\r\n    const [ inputState, setInputState ] = useState(\"\");\r\n    const [ inputCity, setInputCity ] = useState(\"\");\r\n    const selectCountryTransl = intl.formatMessage({id: 'select_country', defaultMessage: \"Select Country\"});\r\n    const selectStateTranls = intl.formatMessage({id: 'select_state', defaultMessage: \"Select State\"});\r\n    const selectCityTranls = intl.formatMessage({id: 'select_city', defaultMessage: \"Select City\"});\r\n    const handleCountry = (event, newValue) => {\r\n        setSelectedCountry(newValue);\r\n        console.log(newValue);\r\n        if (!newValue || newValue !== selectedCountry) {\r\n            setSelectedState({}); setInputState(\"\");\r\n            setSelectedCity({}); setInputCity(\"\");\r\n        }\r\n    };\r\n    const handleState = (event, newValue) => {\r\n        setSelectedState(newValue);\r\n        console.log(newValue);\r\n        if (!newValue || newValue !== selectedState) {\r\n            setSelectedCity({}); setInputCity(\"\");\r\n        }\r\n    };\r\n    const handleCity = (event, newValue) => {\r\n        setSelectedCity(newValue);\r\n        console.log(newValue);\r\n    };\r\n    useEffect(() => {\r\n        if (selectedCountry?.name?.length > 0) {\r\n            const stateList = cscAPI.getStatesOfCountry(selectedCountry.isoCode);\r\n            setStates(stateList);\r\n            if(stateList.length === 0) {\r\n                dispatch(getShippingFee({\r\n                    countryId: selectedCountry.isoCode,\r\n                }))\r\n            }\r\n        }\r\n    }, [selectedCountry]);\r\n    useEffect(() => {\r\n        if (selectedCountry?.name?.length > 0 && selectedState?.name?.length > 0) {\r\n            const cityList = cscAPI.getCitiesOfState(selectedCountry.isoCode, selectedState.isoCode);\r\n            setCities(cityList);\r\n            if(cityList.length === 0) {\r\n                dispatch(getShippingFee({\r\n                    countryId: selectedCountry.isoCode,\r\n                    stateId: selectedState.isoCode,\r\n                }))\r\n            }\r\n        }\r\n    }, [selectedState]);\r\n    useEffect(() => {\r\n        if (!selectedCity || !selectedCity.name) {\r\n            dispatch(changeShippingFee());\r\n        } else {\r\n            dispatch(getShippingFee({\r\n                countryId: selectedCountry.isoCode,\r\n                stateId: selectedState.isoCode,\r\n                cityId: selectedCity.isoCode,\r\n            }))\r\n        }\r\n    }, [selectedCity]);\r\n    useEffect(() => {\r\n        if(cartList.length > 0 && !shippingFeeLoading && !isNaN(shippingFeeInfo?.fee)) {\r\n            setTotalSum(totalSumNumber({\r\n                items: cartList,\r\n                shippingFeeInfo,\r\n            }))\r\n        } else setTotalSum();\r\n    }, [cartList, shippingFeeInfo]);\r\n\r\n    useEffect(() => {\r\n        setCartOpen(false); // Always close cart bar in this screen\r\n    }, [isCartOpen]);\r\n    const handleOpenPromo = () => {\r\n        setOpenPromo(!openPromo);\r\n    }\r\n    const handleOpenNote = () => {\r\n        setOpenNote(!openNote);\r\n    }\r\n    const handleCheckout = () => {\r\n        dispatch(saveShippingAddress({\r\n            country: selectedCountry,\r\n            state: selectedState,\r\n            city: selectedCity,\r\n        }));\r\n        history.push(\"/order_process/\");\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Container className={classes.container} maxWidth='md'>\r\n                <div className={classes.gridList}>\r\n                    <div className={classes.title}>\r\n                        <Typography variant='h5' component='h2'>\r\n                            <FormattedMessage id='my_cart' defaultMessage=\"My Cart\" />\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.itemList}>\r\n                        {\r\n                            cartList?.length > 0\r\n                            ?\r\n                            cartList.map((item, index) => (\r\n                                <CardItem key={index} item={item} />\r\n                            ))\r\n                            :\r\n                            <>\r\n                            <Typography variant='body1' component='h2'>\r\n                                <FormattedMessage id='cart_empty' defaultMessage=\"Your cart is empty\" />{'. '}\r\n                                <Link to=\"/bookstore/\">\r\n                                    <FormattedMessage id='continue_shopping' defaultMessage=\"Continue shopping\" />\r\n                                </Link>\r\n                                {'.'}\r\n                            </Typography>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                    <div className={classes.additional}>\r\n                        <div className={classes.additionalTitle}>\r\n                            <Button \r\n                                className={classes.themeTextColor} \r\n                                onClick={handleOpenPromo}\r\n                            >\r\n                                <TagIcon fontSize='small' style={{marginRight: \"8px\"}} />\r\n                                <FormattedMessage id='enter_promo' defaultMessage=\"Enter a promo code\" />\r\n                            </Button>\r\n                        </div>\r\n                        <Collapse in={openPromo} className={classes.additionalContent}>\r\n                            <PromoCodeComponent />\r\n                        </Collapse>\r\n                        <div className={classes.additionalTitle} >                      \r\n                            <Button \r\n                                className={classes.themeTextColor}\r\n                                onClick={handleOpenNote}    \r\n                            >\r\n                                <DescriptionOutlinedIcon fontSize='small' style={{marginRight: \"8px\"}} />\r\n                                <FormattedMessage id='add_note' defaultMessage=\"Add a note\" />\r\n                            </Button>\r\n                        </div>\r\n                        <Collapse in={openNote} className={classes.additionalContent}>\r\n                            <AddNoteComponent />\r\n                        </Collapse>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.gridSummary}>\r\n                    {\r\n                        cartList?.length > 0\r\n                        &&\r\n                        <>\r\n                        <Hidden smDown>\r\n                        <div className={classes.title}>\r\n                            <Typography variant='h5' component='h2'>\r\n                                <FormattedMessage id='order_summary' defaultMessage=\"Order Summmary\" />\r\n                            </Typography>\r\n                        </div>\r\n                        </Hidden>\r\n                        <Paper className={classes.summaryPaper}>\r\n                            <div className={classes.subtotal}>\r\n                                <Typography variant='body1' component='h2'>\r\n                                    <FormattedMessage id='subtotal' defaultMessage=\"Subtotal\" />\r\n                                </Typography>\r\n                                <Typography variant='body1' component='h2'>\r\n                                    {subtotalDeclare}\r\n                                </Typography>\r\n                            </div>\r\n                            <div  className={classes.shippingSection}>\r\n                                <Typography variant='body1' component='h2'>\r\n                                    <FormattedMessage id='shipping_region' defaultMessage=\"Shipping region\" />\r\n                                </Typography>\r\n                                {\r\n                                    countries?.length > 0\r\n                                    &&\r\n                                    <Autocomplete \r\n                                        value={selectedCountry} \r\n                                        onChange={(event, newValue) => handleCountry(event, newValue)}\r\n                                        inputValue={inputCountry}\r\n                                        onInputChange={(event, newInputValue) => {\r\n                                            setInputCountry(newInputValue);\r\n                                        }}\r\n                                        options={countries}\r\n                                        getOptionLabel={(option) => option?.name || \"\"}\r\n                                        className={classes.autocomplete}\r\n                                        renderOption={(option) => (\r\n                                            <div>\r\n                                                {`${option.flag}  ${option.name}`}\r\n                                            </div>\r\n                                        )}\r\n                                        renderInput={(params) => (\r\n                                            <TextField {...params} \r\n                                                label={selectCountryTransl} \r\n                                                variant=\"outlined\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                }\r\n                                <Collapse in={selectedCountry?.name?.length > 0}>\r\n                                    {\r\n                                        states?.length > 0\r\n                                        &&\r\n                                        <Autocomplete \r\n                                            value={selectedState} \r\n                                            onChange={(event, newValue) => handleState(event, newValue)}\r\n                                            inputValue={inputState}\r\n                                            onInputChange={(event, newInputValue) => {\r\n                                                setInputState(newInputValue);\r\n                                            }}\r\n                                            options={states}\r\n                                            getOptionLabel={(option) => option?.name || \"\"}\r\n                                            className={classes.autocomplete}\r\n                                            renderInput={(params) => (\r\n                                                <TextField {...params} \r\n                                                    label={selectStateTranls} \r\n                                                    variant=\"outlined\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    }\r\n                                </Collapse>\r\n                                <Collapse in={selectedState?.name?.length > 0}>\r\n                                    {\r\n                                        cities?.length > 0\r\n                                        &&\r\n                                        <Autocomplete \r\n                                            value={selectedCity} \r\n                                            onChange={(event, newValue) => handleCity(event, newValue)}\r\n                                            inputValue={inputCity}\r\n                                            onInputChange={(event, newInputValue) => {\r\n                                                setInputCity(newInputValue);\r\n                                            }}\r\n                                            options={cities}\r\n                                            getOptionLabel={(option) => option?.name || \"\"}\r\n                                            className={classes.autocomplete}\r\n                                            renderInput={(params) => (\r\n                                                <TextField {...params} \r\n                                                    label={selectCityTranls} \r\n                                                    variant=\"outlined\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    }\r\n                                </Collapse>\r\n                                <Collapse in={!shippingFeeLoading && shippingFeeInfo && Object.keys(shippingFeeInfo).length > 0}>\r\n                                    {\r\n                                        shippingFeeInfo?.isAllow\r\n                                        ?\r\n                                        <>\r\n                                        <div className={classes.subtotal}>\r\n                                            <Typography variant='body1' component='h2'>\r\n                                                <FormattedMessage id='shipping_fee' defaultMessage=\"Shipping fee\" />\r\n                                            </Typography>\r\n                                            <Typography variant='body1' component='h2'>\r\n                                                {shippingFeeCalc({fee: shippingFeeInfo.fee})}\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <Divider/>\r\n                                        <div className={classes.total}>\r\n                                            <Typography variant='h5' component='h2'>\r\n                                                <FormattedMessage id='total' defaultMessage=\"Total\" />\r\n                                            </Typography>\r\n                                            <Typography variant='h5' component='h2'>\r\n                                                {totalSumCalc({number: totalSum})}\r\n                                            </Typography>\r\n                                        </div>\r\n                                        </>\r\n                                        :\r\n                                        <Typography variant=\"body1\" component='p'>\r\n                                            <FormattedMessage id='shipping_not_allowed' defaultMessage=\"Sorry, we haven't supported shipping to that region yet.\" />\r\n                                        </Typography>\r\n                                    }\r\n                                </Collapse>\r\n                            </div>\r\n                        </Paper>\r\n                        <Paper className={classes.checkoutPaper}>\r\n                            <Button \r\n                                className={classes.checkoutButton} \r\n                                disabled={!totalSum || !(totalSum > 0)}\r\n                                onClick={handleCheckout}\r\n                            >\r\n                                <Typography variant='h6' component='p'>\r\n                                    <FormattedMessage id='checkout' defaultMessage=\"Checkout\" />\r\n                                </Typography>\r\n                            </Button>\r\n                        </Paper>\r\n                        </> \r\n                    }\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkout;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\AboutUs\\index.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\UnderConstruction\\index.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\constants\\globalConstants.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\constants\\orderConstants.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\constants\\productConstants.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\constants\\userConstants.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\RedirectBar.styles.js",["258"],"import { makeStyles } from '@material-ui/styles';\r\nimport { fade } from '@material-ui/core/styles';\r\nimport { LIGHT_WHITE, DARK_BLUE } from '../../utils/theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    iconButton: {\r\n        color: theme.palette.text.main,\r\n    },\r\n    redirectBar: {\r\n        display: 'flex',\r\n    },\r\n    drawerPaper: {\r\n        backgroundColor: theme.palette.background.main,\r\n        color: theme.palette.text.main,\r\n    },\r\n    redirectBarHeader: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        height: theme.spacing(7),\r\n        width: theme.spacing(45),\r\n        color: LIGHT_WHITE,\r\n        backgroundColor: theme.palette.sidebarHeader.main,\r\n        [theme.breakpoints.up('sm')]: {\r\n            height: theme.spacing(8),\r\n        },\r\n    },\r\n    redirectBarIconClose: {\r\n        position: 'absolute',\r\n        color: LIGHT_WHITE,\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n    },\r\n    redirectBarTitle: {\r\n        flexGrow: 1,\r\n        textAlign: 'center',\r\n    },\r\n    accordion: {\r\n        backgroundColor: theme.palette.background.main,\r\n        color: theme.palette.text.main,\r\n    },\r\n}))\r\n\r\nexport default useStyles;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\Catalogue.js",["259"],"E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\NavBar.styles.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\AuthPopup.styles.js",["260"],"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { LIGHT_WHITE } from '../../utils/theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tabContent: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        textAlign: \"center\",\r\n        whiteSpace: 'pre-line',\r\n        maxWidth: theme.spacing(50),\r\n        padding: theme.spacing(5, 2, 7, 2),\r\n    },\r\n    iconBox: {\r\n        margin: theme.spacing(1, 0, 1, 0),\r\n    },\r\n    icon: {\r\n        height: theme.spacing(5),\r\n    },\r\n    welcome: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    form: {\r\n\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 3),\r\n    },\r\n}));\r\n\r\nexport default useStyles;","E:\\QLDA\\book-shop\\frontend\\src\\app\\features\\CartBar.styles.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\actions\\userActions.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\actions\\productActions.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\locales\\vi.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\locales\\en.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\FormPayment.js",["261","262","263","264"],"\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport clsx from 'clsx';\r\nimport axios from 'axios';\r\nimport {\r\n    CardNumberElement,\r\n    CardExpiryElement,\r\n    CardCvcElement,\r\n} from \"@stripe/react-stripe-js\";\r\nimport StripeInput from './StripeInput';\r\nimport { Button, CircularProgress, Collapse, Divider, FormControl, FormControlLabel, Radio, RadioGroup, TextField, Typography } from '@material-ui/core';\r\n\r\nimport useStyles from './styles';\r\nimport { shippingFeeCalc, totalSumCalc, totalSumNumber, wholeSaleCalc } from '../../../utils/priceCalculator';\r\nimport paypalImage from '../../../images/payment/paypal.png';\r\nimport maestroImage from '../../../images/payment/maestro.png';\r\nimport mastercardImage from '../../../images/payment/mastercard.png';\r\nimport visaImage from '../../../images/payment/visa.png';\r\n\r\nconst MODE_PAYMENT_CASH = \"cash\";\r\nconst MODE_PAYMENT_CREDIT = \"credit\";\r\nconst MODE_PAYMENT_PAYPAL = \"paypal\";\r\n\r\nconst FormPayment = ({handleBack, handleNext, activeStep}) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const intl = useIntl();\r\n    const cardNumberTransl = intl.formatMessage({id: 'card_number', defaultMessage: \"Card number\"});\r\n    const expireDateTransl = intl.formatMessage({id: 'expire_date', defaultMessage: \"Expiration date\"});\r\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\r\n    const { cartList } = useSelector(state => state.cart);\r\n    const { firstName, lastName, email, phone, addressDetail } = useSelector(state => state.orderFormShipping);\r\n    const [ modePayment, setModePayment ] = useState(MODE_PAYMENT_CASH);\r\n    const [ paymentProcessing, setPaymentProcessing] = useState(false);\r\n    const [ paymentError, setPaymentError ] = useState();\r\n\r\n    useEffect(() => {\r\n        if (cartList.length === 0 && activeStep === 1) history.replace(\"/checkout/\");\r\n    }, [cartList]);\r\n\r\n    const changeModePayment = (e) => {\r\n        setPaymentError();\r\n        setModePayment(e.target.value);\r\n    }\r\n    const submitPayment = async (e) => {\r\n        setPaymentError();\r\n        setPaymentProcessing(true);\r\n        switch (modePayment) {\r\n            case MODE_PAYMENT_CASH:\r\n                break;   \r\n            case MODE_PAYMENT_CREDIT:\r\n            case MODE_PAYMENT_PAYPAL:\r\n                setTimeout(() => {\r\n                    setPaymentProcessing(false);\r\n                    setPaymentError(true);\r\n                }, 5000)\r\n                return;\r\n            default:\r\n                return;\r\n        };\r\n        try {\r\n            const { order } = await axios.post(\"/api/orders/save_order/\", {\r\n                first_name: firstName,\r\n                last_name: lastName,\r\n                address_detail: addressDetail,\r\n                payment_method: modePayment,\r\n                items: cartList,\r\n                total: totalSumNumber({\r\n                    items: cartList,\r\n                    shippingFeeInfo,\r\n                }).decimalPlaces(2).toNumber(),\r\n                email, phone, city, state, country, currency: 'usd',\r\n            })\r\n            handleNext();\r\n        } catch (error) {\r\n            error?.response?.data?.errors.forEach(err => { \r\n                console.log(err.param);\r\n            });\r\n        }\r\n        setPaymentProcessing(false);\r\n    }\r\n    return (\r\n        <form className={classes.gridForm} noValidate={false} onSubmit={e => { e.preventDefault(); submitPayment(); }}>\r\n            <div className={classes.gridInput}>\r\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\r\n                    <Typography variant='h6' component='p'>\r\n                        <FormattedMessage id='mode_payment' defaultMessage=\"Mode of payment\" />\r\n                    </Typography>\r\n                </div>\r\n                <Divider />\r\n                <FormControl className={classes.paymentBox}>\r\n                    <RadioGroup value={modePayment} onChange={changeModePayment}>\r\n                        <FormControlLabel\r\n                            label={intl.formatMessage({id: \"cash_on_delivery\", defaultMessage: \"Cash on delivery\" })}\r\n                            value={MODE_PAYMENT_CASH}\r\n                            control={<Radio color=\"primary\"  />}\r\n                        />\r\n                        <FormControlLabel\r\n                            label={intl.formatMessage({id: \"credit_card\", defaultMessage: \"Credit card\" })}\r\n                            value={MODE_PAYMENT_CREDIT}\r\n                            control={<Radio color=\"primary\"  />}\r\n                        />\r\n                        <Collapse in={modePayment === MODE_PAYMENT_CREDIT}>\r\n                            <div className={classes.singleField}>\r\n                                <TextField\r\n                                    InputLabelProps={{ \r\n                                        className: classes.textfieldLabel,\r\n                                        shrink: true,\r\n                                    }}\r\n                                    InputProps={{ \r\n                                        className: classes.textfieldInput,\r\n                                        inputComponent: StripeInput,\r\n                                        inputProps: {\r\n                                            component: CardNumberElement\r\n                                        },\r\n                                    }}\r\n                                    className={clsx(classes.cardNumber, classes.textfield)}\r\n                                    required variant=\"outlined\" fullWidth\r\n                                    label={cardNumberTransl}\r\n                                />\r\n                            </div>\r\n                            <div className={classes.pairField}>\r\n                                <TextField\r\n                                    InputLabelProps={{ \r\n                                        className: classes.textfieldLabel,\r\n                                        shrink: true,\r\n                                    }}\r\n                                    InputProps={{ \r\n                                        className: classes.textfieldInput,\r\n                                        inputComponent: StripeInput,\r\n                                        inputProps: {\r\n                                            component: CardExpiryElement\r\n                                        },\r\n                                    }}\r\n                                    className={clsx(classes.cardExpire, classes.textfield)}\r\n                                    required variant=\"outlined\"\r\n                                    label={expireDateTransl}\r\n                                />\r\n                                <TextField\r\n                                    InputLabelProps={{ \r\n                                        className: classes.textfieldLabel,\r\n                                        shrink: true,\r\n                                    }}\r\n                                    InputProps={{ \r\n                                        className: classes.textfieldInput, \r\n                                        inputComponent: StripeInput,\r\n                                        inputProps: {\r\n                                            component: CardCvcElement\r\n                                        },\r\n                                    }}\r\n                                    className={clsx(classes.cardCVC, classes.textfield)}\r\n                                    required variant=\"outlined\"\r\n                                    label=\"CVC\"\r\n                                />\r\n                            </div>\r\n                        </Collapse>\r\n                        <FormControlLabel\r\n                            label={intl.formatMessage({id: \"paypal\", defaultMessage: \"Paypal\" })}\r\n                            value={MODE_PAYMENT_PAYPAL}\r\n                            control={<Radio color=\"primary\"  />}\r\n                        />\r\n                        <div className={classes.creditImages}>\r\n                            <img src={visaImage} alt=\"paypal card\" className={classes.creditImage} />\r\n                            <img src={mastercardImage} alt=\"paypal card\" className={classes.creditImage} />\r\n                            <img src={maestroImage} alt=\"paypal card\" className={classes.creditImage} />\r\n                        </div>\r\n                        <img src={paypalImage} alt=\"paypal card\" className={classes.paypalImage} />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\r\n                    <Typography variant='h6' component='p'>\r\n                        <FormattedMessage id='recipient' defaultMessage=\"Recipient\" />\r\n                    </Typography>\r\n                    <div onClick={handleBack} className={classes.link} >\r\n                        <Typography variant=\"body2\" component='p'>\r\n                            {\"(\"}\r\n                            <FormattedMessage id='edit_recipient_info' defaultMessage=\"Edit recipient information\" />\r\n                            {\")\"}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n                <Divider />\r\n                <div>\r\n                    <div className={classes.singleField}>\r\n                        <Typography variant='body1' component='p'>\r\n                            <FormattedMessage id='fullname' defaultMessage=\"Name\" />\r\n                            {`: ${lastName} ${firstName}`}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.singleField}>\r\n                        <Typography variant='body1' component='p'>\r\n                            <FormattedMessage id='phone' defaultMessage=\"Phone\" />\r\n                            {`: (+${country.phonecode}) ${phone}`}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.singleField}>\r\n                        <Typography variant='body1' component='p'>\r\n                            <FormattedMessage id='email' defaultMessage=\"Email\" />\r\n                            {`: ${email}`}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.singleField}>\r\n                        <Typography variant='body1' component='p'>\r\n                            <FormattedMessage id='address' defaultMessage=\"Address\" />\r\n                            {`: ${addressDetail}, ${city.name}, ${state.name}, ${country.name}.`}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={classes.gridSummary}>\r\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\r\n                    <Typography variant='h6' component='p'>\r\n                        <FormattedMessage id='your_order' defaultMessage=\"Your order\" />\r\n                    </Typography>\r\n                    <Link to=\"/checkout/\" className={classes.link}>\r\n                        <Typography variant=\"body2\" component='p'>\r\n                            {\"(\"}\r\n                            <FormattedMessage id='edit_cart' defaultMessage=\"Edit cart\" />\r\n                            {\")\"}\r\n                        </Typography>\r\n                    </Link>\r\n                </div>\r\n                <Divider />\r\n                <div className={classes.listItems}>\r\n                    {\r\n                        cartList.map((item, i) => (\r\n                            <div key={i} className={classes.item}>\r\n                                <div style={{ display: 'flex' }}>\r\n                                    <Typography variant='body1' component='p' className={classes.itemTitle} >\r\n                                        {item.title}\r\n                                    </Typography>\r\n                                    { \r\n                                    item.quantity > 1 \r\n                                    && \r\n                                    <Typography variant='body1' component='p'>\r\n                                        x{item.quantity}\r\n                                    </Typography> }\r\n                                </div>\r\n                                <Typography \r\n                                    className={classes.price}\r\n                                    variant='body1' component='p'\r\n                                >\r\n                                    {wholeSaleCalc(item)}\r\n                                </Typography>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <Divider />\r\n                {\r\n                    !shippingFeeLoading && !isNaN(shippingFeeInfo?.fee)\r\n                    &&\r\n                    <>\r\n                    <div className={classes.item} style={{paddingBottom: \"8px\"}}>\r\n                        <Typography variant='body1' component='p' >\r\n                            <FormattedMessage id='shipping_fee' defaultMessage=\"Shippng fee\" />    \r\n                        </Typography>\r\n                        <Typography variant='body1' component='p' className={classes.price} >\r\n                            {shippingFeeCalc({ fee: shippingFeeInfo.fee })}\r\n                        </Typography>\r\n                    </div>\r\n                    <Divider />\r\n                    <div className={classes.item} style={{paddingBottom: \"24px\"}}>\r\n                        <Typography variant='h6' component='p' >\r\n                            <FormattedMessage id='total' defaultMessage=\"Total\" />    \r\n                        </Typography>\r\n                        <Typography variant='h6' component='p' className={classes.totalPrice} >\r\n                            {totalSumCalc({ \r\n                                number: totalSumNumber({\r\n                                    items: cartList,\r\n                                    shippingFeeInfo,\r\n                                }),\r\n                            })}\r\n                        </Typography>\r\n                    </div>\r\n                    <Button className={classes.paymentButton} type=\"submit\" disabled={paymentProcessing}>\r\n                        {\r\n                            paymentProcessing\r\n                            ?\r\n                            <CircularProgress size={30} classes={{ colorPrimary: classes.circularProgress }} />\r\n                            :\r\n                            <Typography variant='h6' component='p'>\r\n                                <FormattedMessage id='pay' defaultMessage=\"Pay\" />\r\n                                {` ${totalSumCalc({ \r\n                                    number: totalSumNumber({\r\n                                        items: cartList,\r\n                                        shippingFeeInfo,\r\n                                    }),\r\n                                })}`}\r\n                            </Typography>\r\n                        }\r\n                    </Button>\r\n                    <Collapse in={paymentError} className={classes.paymentError}>\r\n                        <Typography variant='body1' component='p' color=\"secondary\" >\r\n                            <FormattedMessage id='payment_error' defaultMessage=\"Payment error. Please try other payment method.\" />    \r\n                        </Typography>\r\n                    </Collapse>\r\n                    </>\r\n                }\r\n            </div>\r\n        </form> \r\n    )\r\n}\r\n\r\nexport default FormPayment;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\FormComplete.js",["265"],"\r\nimport { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport useStyles from './styles';\r\nimport orderCompletedImage from '../../../images/payment/order_completed.jpg';\r\nimport { removeAllLocalCart } from '../../../actions/productActions';\r\n\r\nconst FormComplete = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(removeAllLocalCart());\r\n    }, []);\r\n    return (\r\n        <>\r\n        <img src={orderCompletedImage} alt=\"Order Completed\" className={classes.formComplete} />\r\n        <Link to=\"/\" className={classes.goHomeLink} >\r\n            <Button className={classes.goHomeButton}/>\r\n        </Link>\r\n        <a className={classes.attribute} href=\"http://www.freepik.com\" target='_blank' rel=\"noreferrer\">\r\n            Image designed by stories / Freepik\r\n        </a>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormComplete;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\styles.js",["266"],"import { makeStyles } from '@material-ui/styles';\r\nimport { LIGHT_WHITE, DARK_BLACK } from '../../../utils/theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        position: 'relative',\r\n        top: theme.spacing(7),\r\n        backgroundColor: theme.palette.background.main,\r\n        color: theme.palette.text.main,\r\n        whiteSpace: 'pre-line',\r\n        minHeight: '90vh',\r\n        [theme.breakpoints.up('sm')]: {\r\n            top: theme.spacing(8),\r\n        },\r\n    },\r\n    container: {\r\n        position: 'absolute',\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        backgroundColor: theme.palette.navBar.main,\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr',\r\n        gridTemplateRows: 'auto auto',\r\n        gridTemplateAreas: '\"gridStepper\" \"gridForm\"',\r\n        margin: theme.spacing(0, 0, 1, 0),\r\n        paddingBottom: theme.spacing(8),\r\n        borderRadius: theme.spacing(1.25),\r\n        [theme.breakpoints.up('md')]: {\r\n            margin: theme.spacing(10, 0, 3, 0),\r\n            paddingBottom: theme.spacing(3),\r\n        }\r\n    },\r\n    gridStepper: {\r\n        gridArea: \"gridStepper\",\r\n        marginTop: theme.spacing(5),\r\n    },\r\n    gridForm: {\r\n        gridArea: \"gridForm\",\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr',\r\n        gridTemplateRows: 'auto auto',\r\n        gridTemplateAreas: '\"gridInput\" \"gridSummary\"',\r\n        margin: theme.spacing(0, 0, 3, 0),\r\n        paddingBottom: theme.spacing(8),\r\n        [theme.breakpoints.up('sm')]: {\r\n            gridTemplateColumns: '3fr 2fr',\r\n            gridTemplateRows: '1fr',\r\n            gridTemplateAreas: '\"gridInput gridSummary\"',\r\n            gridGap: theme.spacing(5),\r\n        },\r\n    },\r\n    gridInput: {\r\n        gridArea: \"gridInput\",\r\n    },\r\n    gridSummary: {\r\n        gridArea: \"gridSummary\",\r\n    },\r\n    pairField: {\r\n        display: 'grid',\r\n        padding: theme.spacing(2, 0, 0, 0),\r\n        gridTemplateColumns: '1fr',\r\n        gridTemplateRows: '2fr',\r\n        gridTemplateAreas: '\"gridLeft\" \"gridRight\"',\r\n        gridGap: theme.spacing(2),\r\n        [theme.breakpoints.up('md')]: {\r\n            gridTemplateColumns: '3fr 2fr',\r\n            gridTemplateRows: '1fr',\r\n            gridTemplateAreas: '\"gridLeft gridRight\"',\r\n        },\r\n    },\r\n    singleField: {\r\n        padding: theme.spacing(2, 0, 0, 0),\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    firstname: { gridArea: 'gridLeft' },\r\n    lastname: { gridArea: 'gridRight' },\r\n    email: { gridArea: 'gridLeft' },\r\n    phone: { gridArea: 'gridRight' },\r\n    city: { gridArea: 'gridLeft' },\r\n    state: { gridArea: 'gridRight' },\r\n    yourOrder: {\r\n        paddingBottom: theme.spacing(2),\r\n    },\r\n    listItems: {\r\n        paddingBottom: theme.spacing(2),\r\n    },\r\n    item: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        padding: theme.spacing(1, 0, 0, 0),\r\n    },\r\n    itemTitle: {\r\n        maxWidth: '230px',\r\n        display: 'inline-block',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    price: {\r\n        width: theme.spacing(8),\r\n        color: theme.palette.text.blur,\r\n    },\r\n    totalPrice: {\r\n        width: theme.spacing(10),\r\n    },\r\n    paymentButton: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.sidebarHeader.main,\r\n        color: LIGHT_WHITE,\r\n        '&:hover': {\r\n            color: theme.palette.text.main,\r\n            backgroundColor: theme.palette.background.main,\r\n        },\r\n    },\r\n    textfield: {\r\n        \r\n    },\r\n    textfieldInput: {\r\n        color: theme.palette.text.main,\r\n    },\r\n    textfieldLabel: {\r\n        color: theme.palette.text.blur,\r\n    },\r\n    inputAdornment: {\r\n        color: theme.palette.text.main,\r\n    },\r\n    link: {\r\n        textDecoration: \"none\",\r\n        color: theme.palette.text.main,\r\n        marginLeft: theme.spacing(3),\r\n        '&:hover': { cursor: 'pointer' }, \r\n    },\r\n    paymentBox: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        border: \"solid 1px\",\r\n        padding: theme.spacing(1, 2, 1, 2),\r\n    },\r\n    creditImages: {\r\n        position: \"absolute\",\r\n        top: theme.spacing(7),\r\n        right: theme.spacing(2),\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            display: 'none',\r\n        }\r\n    },\r\n    creditImage: {\r\n        width: '50px',\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n    paypalImage: {\r\n        position: \"absolute\",\r\n        width: \"50px\",\r\n        bottom: theme.spacing(1),\r\n        right: theme.spacing(2),\r\n    },\r\n    circularProgress: {\r\n        color: theme.palette.orangeBlue.main,\r\n    },\r\n    paymentError: {\r\n        textAlign: \"center\",\r\n        paddingTop: theme.spacing(1),\r\n    },\r\n    orderCompleted: {\r\n        position: \"relative\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    formComplete: {\r\n        borderRadius: theme.spacing(1.25),\r\n        margin: theme.spacing(15, 0, 15, 0),\r\n        height: \"330px\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            height: \"65vh\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            margin: theme.spacing(5, 0, 5, 0),\r\n        },\r\n    },\r\n    goHomeLink: {\r\n        position: \"absolute\",\r\n        width: \"88px\", height: \"27px\",\r\n        left: \"50%\", top: \"67%\",\r\n        transform: \"translateX(-44%)\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"160px\", height: \"40px\",\r\n            left: \"50%\", top: \"71%\",\r\n            transform: \"translateX(-43%)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"160px\", height: \"40px\",\r\n            left: \"50%\", top: \"76%\",\r\n            transform: \"translateX(-44%)\",\r\n        },\r\n    },\r\n    goHomeButton: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        borderRadius: \"15px\",\r\n    },\r\n    attribute: {\r\n        color: theme.palette.text.main,\r\n        textDecoration: 'none',\r\n    },\r\n}))\r\n\r\nexport default useStyles;","E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\FormShipping.js",["267","268"],"\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport clsx from 'clsx';\r\nimport axios from 'axios';\r\nimport { Button, Divider, InputAdornment, TextField, Typography } from '@material-ui/core';\r\n\r\nimport useStyles from './styles';\r\nimport { shippingFeeCalc, totalSumCalc, totalSumNumber, wholeSaleCalc } from '../../../utils/priceCalculator';\r\nimport { saveOrderFormShipping } from '../../../actions/orderActions';\r\n\r\nconst TYPE_FIRSTNAME = \"TYPE_FIRSTNAME\";\r\nconst TYPE_LASTNAME = \"TYPE_LASTNAME\";\r\nconst TYPE_EMAIL = \"TYPE_EMAIL\";\r\nconst TYPE_PHONE = \"TYPE_PHONE\";\r\nconst TYPE_ADDRESS = \"TYPE_ADDRESS\";\r\n\r\nconst FormShipping = ({handleNext, activeStep}) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const intl = useIntl();\r\n    const firstnameTransl = intl.formatMessage({id: 'firstname', defaultMessage: \"First Name\"});\r\n    const lastnameTransl = intl.formatMessage({id: 'lastname', defaultMessage: \"Last Name\"});\r\n    const emailTransl = intl.formatMessage({id: 'email', defaultMessage: \"Email\"});\r\n    const phoneTransl = intl.formatMessage({id: 'phone', defaultMessage: \"Phone Number\"});\r\n    const shippingDetailTransl = intl.formatMessage({id: 'shipping_addr_detail', defaultMessage: \"Shipping address detail\"});\r\n    const cityTransl = intl.formatMessage({id: 'city', defaultMessage: \"City\"});\r\n    const stateTransl = intl.formatMessage({id: 'state', defaultMessage: \"State\"});\r\n    const countryTransl = intl.formatMessage({id: 'country', defaultMessage: \"Country\"});\r\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\r\n    const { cartList } = useSelector(state => state.cart);\r\n    const { firstName, lastName, email, phone, addressDetail } = useSelector(state => state.orderFormShipping);\r\n    const [ firstNameError, setFirstNameError ] = useState();\r\n    const [ lastNameError, setLastNameError ] = useState();\r\n    const [ emailError, setEmailError ] = useState();\r\n    const [ phoneError, setPhoneError ] = useState();\r\n    const [ addressDetailError, setAddressDetailError ] = useState();\r\n\r\n    useEffect(() => {\r\n        if (cartList.length === 0 && activeStep === 0) history.replace(\"/checkout/\");\r\n    }, [cartList]);\r\n\r\n    const handleTextField = (value, type) => {\r\n        const data = {};\r\n        switch (type) {\r\n            case TYPE_FIRSTNAME:\r\n                data.firstName = value;\r\n                break;\r\n            case TYPE_LASTNAME:\r\n                data.lastName = value;\r\n                break;\r\n            case TYPE_EMAIL:\r\n                data.email = value;\r\n                break;\r\n            case TYPE_PHONE:\r\n                data.phone = value;\r\n                break;\r\n            case TYPE_ADDRESS:\r\n                data.addressDetail = value;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        dispatch(saveOrderFormShipping(data));\r\n    }\r\n    const resetError = () => {\r\n        setFirstNameError(); setLastNameError(); setEmailError(); setPhoneError(); setAddressDetailError();\r\n    };\r\n    const submitShipping = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await axios.post(\"/api/orders/validate_shipping\",\r\n                            {\r\n                                first_name: firstName,\r\n                                last_name: lastName,\r\n                                email, phone,\r\n                                address_detail: addressDetail,\r\n                            });\r\n            if(response.data.isValidate) {\r\n                resetError();\r\n                handleNext(); \r\n            }\r\n        } catch (error) {\r\n            error?.response?.data?.errors?.map(err => {\r\n                switch(err.param) {\r\n                    case \"first_name\":\r\n                        setFirstNameError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case \"last_name\":\r\n                        setLastNameError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case \"email\":\r\n                        setEmailError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    case \"phone\":\r\n                        setPhoneError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;  \r\n                    case \"address_detail\":\r\n                        setAddressDetailError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n        }\r\n    };\r\n    return (\r\n        <form className={classes.gridForm} noValidate={false} onSubmit={submitShipping}>\r\n            <div className={classes.gridInput}>\r\n                <div className={classes.singleField}>\r\n                    <Typography variant='h6' component='p'>\r\n                        <FormattedMessage id='recipient' defaultMessage=\"Recipient\" />\r\n                    </Typography>\r\n                </div>\r\n                <div className={classes.pairField}>\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ className: classes.textfieldInput }}\r\n                        className={clsx(classes.firstname, classes.textfield)}\r\n                        required variant=\"outlined\" fullWidth autoFocus\r\n                        label={firstnameTransl}\r\n                        onChange={(e) => handleTextField(e.target.value, TYPE_FIRSTNAME)}\r\n                        // value={firstName}\r\n                        error={firstNameError}\r\n                        helperText={firstNameError}\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ className: classes.textfieldInput }}\r\n                        className={clsx(classes.lastname, classes.textfield)}\r\n                        required variant=\"outlined\" fullWidth\r\n                        label={lastnameTransl}\r\n                        onChange={(e) => handleTextField(e.target.value, TYPE_LASTNAME)}\r\n                        // value={lastName}\r\n                        error={lastNameError}\r\n                        helperText={lastNameError}\r\n                    />\r\n                </div>\r\n                <div className={classes.pairField}>\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ className: classes.textfieldInput }}\r\n                        className={clsx(classes.email, classes.textfield)}\r\n                        type=\"email\" autoComplete=\"email\"\r\n                        required variant=\"outlined\" fullWidth\r\n                        label={emailTransl}\r\n                        onChange={(e) => handleTextField(e.target.value, TYPE_EMAIL)}\r\n                        // value={email}\r\n                        error={emailError}\r\n                        helperText={emailError}\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ \r\n                            className: classes.textfieldInput,\r\n                            startAdornment: <InputAdornment \r\n                                                classes={{ positionStart: classes.inputAdornment }} \r\n                                                position=\"start\"\r\n                                            >\r\n                                                {`(+${country?.phonecode})`}\r\n                                            </InputAdornment>,\r\n                        }}\r\n                        className={clsx(classes.phone, classes.textfield)}\r\n                        required variant=\"outlined\" fullWidth\r\n                        label={phoneTransl} type=\"tel\"\r\n                        onChange={(e) => handleTextField(e.target.value, TYPE_PHONE)}\r\n                        // value={phone}\r\n                        error={phoneError}\r\n                        helperText={phoneError}\r\n                    />\r\n                </div>\r\n                <div className={classes.singleField}>\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ className: classes.textfieldInput }}\r\n                        className={clsx(classes.textfield)}\r\n                        required variant=\"outlined\" fullWidth\r\n                        label={shippingDetailTransl}\r\n                        onChange={(e) => handleTextField(e.target.value, TYPE_ADDRESS)}\r\n                        // value={addressDetail}\r\n                        error={addressDetailError}\r\n                        helperText={addressDetailError}\r\n                    />\r\n                </div>\r\n                <div className={classes.pairField}>\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ \r\n                            className: classes.textfieldInput, \r\n                            readOnly: true, \r\n                        }}\r\n                        className={clsx(classes.city, classes.textfield)}\r\n                        required variant=\"outlined\" fullWidth \r\n                        label={cityTransl} defaultValue={city?.name || \"\"}\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ \r\n                            className: classes.textfieldInput, \r\n                            readOnly: true, \r\n                        }}\r\n                        className={clsx(classes.state, classes.textfield)}\r\n                        required variant=\"outlined\" fullWidth\r\n                        label={stateTransl} defaultValue={state?.name || \"\"}\r\n                    />\r\n                </div>\r\n                <div className={classes.singleField}>\r\n                    <TextField\r\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\r\n                        InputProps={{ \r\n                            className: classes.textfieldInput, \r\n                            readOnly: true, \r\n                        }}\r\n                        className={clsx(classes.textfield)}\r\n                        required variant=\"outlined\"\r\n                        label={countryTransl} \r\n                        defaultValue={`${country?.flag} ${country?.name}` || \"\"}\r\n                    />\r\n                    <Link to=\"/checkout/\" className={classes.link}>\r\n                        <Typography variant=\"body2\" component='p'>\r\n                            {\"(\"}\r\n                            <FormattedMessage id='edit_shipping_region' defaultMessage=\"Edit shipping region\" />\r\n                            {\")\"}\r\n                        </Typography>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <div className={classes.gridSummary}>\r\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\r\n                    <Typography variant='h6' component='p'>\r\n                        <FormattedMessage id='your_order' defaultMessage=\"Your order\" />\r\n                    </Typography>\r\n                    <Link to=\"/checkout/\" className={classes.link}>\r\n                        <Typography variant=\"body2\" component='p'>\r\n                            {\"(\"}\r\n                            <FormattedMessage id='edit_cart' defaultMessage=\"Edit cart\" />\r\n                            {\")\"}\r\n                        </Typography>\r\n                    </Link>\r\n                </div>\r\n                <Divider />\r\n                <div className={classes.listItems}>\r\n                    {\r\n                        cartList.map((item, i) => (\r\n                            <div key={i} className={classes.item}>\r\n                                <div style={{ display: 'flex' }}>\r\n                                    <Typography variant='body1' component='p' className={classes.itemTitle} >\r\n                                        {item.title}\r\n                                    </Typography>\r\n                                    { \r\n                                    item.quantity > 1 \r\n                                    && \r\n                                    <Typography variant='body1' component='p'>\r\n                                        x{item.quantity}\r\n                                    </Typography> }\r\n                                </div>\r\n                                <Typography \r\n                                    className={classes.price}\r\n                                    variant='body1' component='p'\r\n                                >\r\n                                    {wholeSaleCalc(item)}\r\n                                </Typography>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <Divider />\r\n                {\r\n                    !shippingFeeLoading && !isNaN(shippingFeeInfo?.fee)\r\n                    &&\r\n                    <>\r\n                    <div className={classes.item} style={{paddingBottom: \"8px\"}}>\r\n                        <Typography variant='body1' component='p' >\r\n                            <FormattedMessage id='shipping_fee' defaultMessage=\"Shippng fee\" />    \r\n                        </Typography>\r\n                        <Typography variant='body1' component='p' className={classes.price} >\r\n                            {shippingFeeCalc({ fee: shippingFeeInfo.fee })}\r\n                        </Typography>\r\n                    </div>\r\n                    <Divider />\r\n                    <div className={classes.item} style={{paddingBottom: \"24px\"}}>\r\n                        <Typography variant='h6' component='p' >\r\n                            <FormattedMessage id='total' defaultMessage=\"Total\" />    \r\n                        </Typography>\r\n                        <Typography variant='h6' component='p' className={classes.totalPrice} >\r\n                            {totalSumCalc({ \r\n                                number: totalSumNumber({\r\n                                    items: cartList,\r\n                                    shippingFeeInfo,\r\n                                }),\r\n                            })}\r\n                        </Typography>\r\n                    </div>\r\n                    <Button className={classes.paymentButton} type=\"submit\">\r\n                        <Typography variant='h6' component='p'>\r\n                            <FormattedMessage id='continue_payment' defaultMessage=\"Continue to payment\" />\r\n                        </Typography>\r\n                    </Button>\r\n                    </>\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormShipping;","E:\\QLDA\\book-shop\\frontend\\src\\utils\\stripeAPI.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\Catalogue.styles.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\AboutUs\\styles.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\utils\\axiosInstance.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\utils\\priceCalculator.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\actions\\orderActions.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Checkout\\styles.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\OrderProcess\\StripeInput.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Product\\styles.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Bookstore\\styles.js",[],"E:\\QLDA\\book-shop\\frontend\\src\\app\\pages\\Home\\styles.js",[],{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"274","line":30,"column":22,"nodeType":"275","messageId":"276","endLine":30,"endColumn":30},{"ruleId":"277","severity":1,"message":"278","line":48,"column":8,"nodeType":"279","endLine":48,"endColumn":16,"suggestions":"280"},{"ruleId":"277","severity":1,"message":"278","line":162,"column":8,"nodeType":"279","endLine":162,"endColumn":16,"suggestions":"281"},{"ruleId":"277","severity":1,"message":"282","line":293,"column":8,"nodeType":"279","endLine":293,"endColumn":18,"suggestions":"283"},{"ruleId":"277","severity":1,"message":"284","line":39,"column":8,"nodeType":"279","endLine":39,"endColumn":15,"suggestions":"285"},{"ruleId":"273","severity":1,"message":"286","line":6,"column":8,"nodeType":"275","messageId":"276","endLine":6,"endColumn":12},{"ruleId":"273","severity":1,"message":"287","line":7,"column":72,"nodeType":"275","messageId":"276","endLine":7,"endColumn":82},{"ruleId":"273","severity":1,"message":"288","line":26,"column":70,"nodeType":"275","messageId":"276","endLine":26,"endColumn":85},{"ruleId":"273","severity":1,"message":"289","line":38,"column":11,"nodeType":"275","messageId":"276","endLine":38,"endColumn":22},{"ruleId":"277","severity":1,"message":"290","line":44,"column":8,"nodeType":"279","endLine":44,"endColumn":50,"suggestions":"291"},{"ruleId":"277","severity":1,"message":"292","line":47,"column":8,"nodeType":"279","endLine":47,"endColumn":20,"suggestions":"293"},{"ruleId":"273","severity":1,"message":"294","line":10,"column":60,"nodeType":"275","messageId":"276","endLine":10,"endColumn":65},{"ruleId":"277","severity":1,"message":"295","line":258,"column":8,"nodeType":"279","endLine":258,"endColumn":10,"suggestions":"296"},{"ruleId":"277","severity":1,"message":"297","line":138,"column":23,"nodeType":"298","endLine":138,"endColumn":49},{"ruleId":"277","severity":1,"message":"295","line":83,"column":8,"nodeType":"279","endLine":83,"endColumn":19,"suggestions":"299"},{"ruleId":"277","severity":1,"message":"295","line":237,"column":8,"nodeType":"279","endLine":237,"endColumn":25,"suggestions":"300"},{"ruleId":"277","severity":1,"message":"301","line":249,"column":8,"nodeType":"279","endLine":249,"endColumn":23,"suggestions":"302"},{"ruleId":"277","severity":1,"message":"303","line":260,"column":8,"nodeType":"279","endLine":260,"endColumn":22,"suggestions":"304"},{"ruleId":"277","severity":1,"message":"305","line":268,"column":8,"nodeType":"279","endLine":268,"endColumn":35,"suggestions":"306"},{"ruleId":"277","severity":1,"message":"292","line":272,"column":8,"nodeType":"279","endLine":272,"endColumn":20,"suggestions":"307"},{"ruleId":"273","severity":1,"message":"308","line":3,"column":23,"nodeType":"275","messageId":"276","endLine":3,"endColumn":32},{"ruleId":"277","severity":1,"message":"295","line":58,"column":8,"nodeType":"279","endLine":58,"endColumn":10,"suggestions":"309"},{"ruleId":"273","severity":1,"message":"310","line":3,"column":10,"nodeType":"275","messageId":"276","endLine":3,"endColumn":21},{"ruleId":"273","severity":1,"message":"311","line":2,"column":10,"nodeType":"275","messageId":"276","endLine":2,"endColumn":20},{"ruleId":"273","severity":1,"message":"312","line":4,"column":10,"nodeType":"275","messageId":"276","endLine":4,"endColumn":21},{"ruleId":"277","severity":1,"message":"313","line":42,"column":8,"nodeType":"279","endLine":42,"endColumn":18,"suggestions":"314"},{"ruleId":"273","severity":1,"message":"315","line":65,"column":21,"nodeType":"275","messageId":"276","endLine":65,"endColumn":26},{"ruleId":"277","severity":1,"message":"295","line":16,"column":8,"nodeType":"279","endLine":16,"endColumn":10,"suggestions":"316"},{"ruleId":"273","severity":1,"message":"317","line":2,"column":23,"nodeType":"275","messageId":"276","endLine":2,"endColumn":33},{"ruleId":"277","severity":1,"message":"313","line":44,"column":8,"nodeType":"279","endLine":44,"endColumn":18,"suggestions":"318"},{"ruleId":"319","severity":1,"message":"320","line":87,"column":52,"nodeType":"321","messageId":"322","endLine":87,"endColumn":54},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"no-unused-vars","'userInfo' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clearErrors' and 'intl'. Either include them or remove the dependency array.","ArrayExpression",["325"],["326"],"React Hook useEffect has a missing dependency: 'handleClose'. Either include it or remove the dependency array.",["327"],"React Hook useEffect has missing dependencies: 'dispatch', 'enqueueSnackbar', and 'intl'. Either include them or remove the dependency array.",["328"],"'clsx' is defined but never used.","'Typography' is defined but never used.","'shippingFeeInfo' is assigned a value but never used.","'handleReset' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["329"],"React Hook useEffect has a missing dependency: 'setCartOpen'. Either include it or remove the dependency array.",["330"],"'Slide' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["331"],"Assignments to the 'searchArray' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["332"],["333"],"React Hook useEffect has missing dependencies: 'dispatch', 'selectedCountry.isoCode', and 'selectedCountry?.name?.length'. Either include them or remove the dependency array.",["334"],"React Hook useEffect has missing dependencies: 'dispatch', 'selectedCountry.isoCode', and 'selectedState.isoCode'. Either include them or remove the dependency array.",["335"],"React Hook useEffect has a missing dependency: 'shippingFeeLoading'. Either include it or remove the dependency array.",["336"],["337"],"'DARK_BLUE' is defined but never used.",["338"],"'LIGHT_WHITE' is defined but never used.","'useContext' is defined but never used.","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'activeStep' and 'history'. Either include them or remove the dependency array.",["339"],"'order' is assigned a value but never used.",["340"],"'DARK_BLACK' is defined but never used.",["341"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"342","fix":"343"},{"desc":"342","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"351","fix":"365"},{"desc":"353","fix":"366"},{"desc":"367","fix":"368"},{"desc":"353","fix":"369"},{"desc":"367","fix":"370"},"Update the dependencies array to be: [clearErrors, errors, intl]",{"range":"371","text":"372"},{"range":"373","text":"372"},"Update the dependencies array to be: [handleClose, userInfo]",{"range":"374","text":"375"},"Update the dependencies array to be: [dispatch, enqueueSnackbar, intl, notis]",{"range":"376","text":"377"},"Update the dependencies array to be: [city, state, country, shippingFeeLoading, history]",{"range":"378","text":"379"},"Update the dependencies array to be: [isCartOpen, setCartOpen]",{"range":"380","text":"381"},"Update the dependencies array to be: [dispatch]",{"range":"382","text":"383"},"Update the dependencies array to be: [dispatch, productId]",{"range":"384","text":"385"},"Update the dependencies array to be: [dispatch, selectedCountry]",{"range":"386","text":"387"},"Update the dependencies array to be: [dispatch, selectedCountry.isoCode, selectedCountry?.name?.length, selectedState]",{"range":"388","text":"389"},"Update the dependencies array to be: [dispatch, selectedCity, selectedCountry.isoCode, selectedState.isoCode]",{"range":"390","text":"391"},"Update the dependencies array to be: [cartList, shippingFeeInfo, shippingFeeLoading]",{"range":"392","text":"393"},{"range":"394","text":"381"},{"range":"395","text":"383"},"Update the dependencies array to be: [activeStep, cartList, history]",{"range":"396","text":"397"},{"range":"398","text":"383"},{"range":"399","text":"397"},[2234,2242],"[clearErrors, errors, intl]",[7821,7829],[13848,13858],"[handleClose, userInfo]",[1434,1441],"[dispatch, enqueueSnackbar, intl, notis]",[1941,1983],"[city, state, country, shippingFeeLoading, history]",[2086,2098],"[isCartOpen, setCartOpen]",[8978,8980],"[dispatch]",[3265,3276],"[dispatch, productId]",[10149,10166],"[dispatch, selectedCountry]",[10663,10678],"[dispatch, selectedCountry.isoCode, selectedCountry?.name?.length, selectedState]",[11042,11056],"[dispatch, selectedCity, selectedCountry.isoCode, selectedState.isoCode]",[11338,11365],"[cartList, shippingFeeInfo, shippingFeeLoading]",[11470,11482],[2441,2443],[2121,2131],"[activeStep, cartList, history]",[531,533],[2452,2462]]